<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>UnhappyBrain</title>
    <link>https://carrymaniac.github.io/</link>
    <description>Recent content on UnhappyBrain</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-hans</language>
    <copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
    <lastBuildDate>Mon, 06 Apr 2020 14:14:14 +0800</lastBuildDate>
    
	<atom:link href="https://carrymaniac.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>30分钟搭写一个聊天板</title>
      <link>https://carrymaniac.github.io/posts/my-chat/</link>
      <pubDate>Mon, 27 Apr 2020 17:27:37 +0800</pubDate>
      
      <guid>https://carrymaniac.github.io/posts/my-chat/</guid>
      <description>最近放假在家，无事学习了netty，写一个demo练手，快速编写一个简陋的聊天网页。
思路 基本的结构是后台采用netty，前端采用websocket和后台进行连接。
登陆：
 前端用户发请求到netty服务器，服务器进行校验，返回响应  聊天：
 前端用户将消息内容和聊天对象的ID以JSON报文的格式发给后台 后台经过Hadnler链拿到包，对里面的用户数据进行解析，并返回响应给用户前端 同时通过会话存储拿到聊天对象的channel并将消息发送给目标  本文阅读需要有对netty基础的了解，以及一点点前端websocket的知识
后台部分 创建服务器启动类：
package com.gdou.im.server; import com.gdou.im.server.handler.WebSocketHandler; import com.gdou.im.server.handler.LoginRequestHandler; import com.gdou.im.server.handler.MessageRequestHandler; import io.netty.bootstrap.ServerBootstrap; import io.netty.channel.ChannelFuture; import io.netty.channel.ChannelInitializer; import io.netty.channel.nio.NioEventLoopGroup; import io.netty.channel.socket.nio.NioServerSocketChannel; import io.netty.channel.socket.nio.NioSocketChannel; import io.netty.handler.codec.http.HttpObjectAggregator; import io.netty.handler.codec.http.HttpServerCodec; import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler; import io.netty.handler.stream.ChunkedWriteHandler; /** * @ProjectName: demo * @Package: com.gdou.im.server * @ClassName: NettyServer * @Author: carrymaniac * @Description: netty的服务器端 * @Date: 2020/1/4 1:08 下午 * @Version: */ public class NettyServer { public static void main(String[] args) throws InterruptedException { //定义线程组  NioEventLoopGroup bossGroup = new NioEventLoopGroup(); NioEventLoopGroup workerGroup = new NioEventLoopGroup(); final ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.</description>
    </item>
    
    <item>
      <title>Spring Security</title>
      <link>https://carrymaniac.github.io/posts/spring-security/</link>
      <pubDate>Mon, 27 Apr 2020 17:17:30 +0800</pubDate>
      
      <guid>https://carrymaniac.github.io/posts/spring-security/</guid>
      <description>JWT 流程  客户端使用用户名和密码请求登录 服务端收到请求后会去验证用户名和密码，如果用户名和密码跟数据库记录不一致则验证失败，如果一致则验证通过，服务端会签发一个 Token 返回给客户端 客户端收到请求后会将 Token 缓存起来，比如放在浏览器 Cookie 中或者本地存储中，之后每次请求都会携带该 Token 服务端收到请求后会验证请求中携带的 Token，验证通过则进行业务逻辑处理并成功返回数据  jwt,即JSON WEB TOKEN，它是基于 RFC 7519 标准定义的一种可以安全传输的的JSON对象，由于使用了数字签名，所以是可信任和安全的。
格式 在 JWT 中，Token 有三部分组成，中间用 . 隔开，并使用 Base64 编码：
 header.payload.signature
 其中：
 header用于存放  Token 的类型 Token 所使用的加密算法    { &amp;#34;typ&amp;#34;: &amp;#34;JWT&amp;#34;, &amp;#34;alg&amp;#34;: &amp;#34;HS256&amp;#34; } 该例说明 Token 类型是 JWT，加密算法是 HS256（alg 算法可以有多种）。
  payload
Payload 中携带 Token 的具体内容，里面有一些标准的字段，当然你也可以添加额外的字段，来表达更丰富的信息，可以用这些信息来做更丰富的处理，比如记录请求用户名，标准字段有：
 iss：JWT Token 的签发者 sub：主题 exp：JWT Token 过期时间 aud：接收 JWT Token 的一方 iat：JWT Token 签发时间 nbf：JWT Token 生效时间 jti：JWT Token ID    { &amp;#34;id&amp;#34;: 2, &amp;#34;username&amp;#34;: &amp;#34;kong&amp;#34;, &amp;#34;nbf&amp;#34;: 1527931805, &amp;#34;iat&amp;#34;: 1527931805 } {&amp;#34;sub&amp;#34;:&amp;#34;admin&amp;#34;, &amp;#34;iat&amp;#34;:1489079981393, &amp;#34;exp&amp;#34;:1489684781}   signature</description>
    </item>
    
    <item>
      <title>小后台学Vue</title>
      <link>https://carrymaniac.github.io/posts/vue-learn/</link>
      <pubDate>Sun, 19 Apr 2020 23:18:17 +0800</pubDate>
      
      <guid>https://carrymaniac.github.io/posts/vue-learn/</guid>
      <description>[TOC]
vue指令 v-text：设置替换普通文本，和{{ }}效果类似： &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;ie=edge&amp;#34;&amp;gt; &amp;lt;title&amp;gt;vue&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;h2 id=&amp;#34;data&amp;#34;&amp;gt;这是一个信息:{{message}}&amp;lt;/h2&amp;gt; &amp;lt;div v-text=&amp;#34;info&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; var app = new Vue({ el:&amp;#34;#app&amp;#34;, data:{ message:&amp;#34;这是gdou&amp;#34;, info:&amp;#34;这是info&amp;#34; } }) &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; v-html :用于拼接html代码块，与v-text有所区别 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;ie=edge&amp;#34;&amp;gt; &amp;lt;title&amp;gt;vue&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;h2 id=&amp;#34;data&amp;#34;&amp;gt;这是一个信息:{{message}}&amp;lt;/h2&amp;gt; &amp;lt;div v-text=&amp;#34;info&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div v-html=&amp;#34;htmlcode&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.</description>
    </item>
    
    <item>
      <title>设计模式</title>
      <link>https://carrymaniac.github.io/posts/dp/</link>
      <pubDate>Sun, 12 Apr 2020 16:53:26 +0800</pubDate>
      
      <guid>https://carrymaniac.github.io/posts/dp/</guid>
      <description>记录一下几个最常问常考的设计模式，供自己回忆
单例设计模式 简单点说，就是一个应用程序中，某个类的实例对象只有一个，你没有办法去new，因为构造器是被private修饰的，一般通过getInstance()的方法来获取它们的实例。
//线程不安全式写法 public class Singleton { private static Singleton singleton; private Singleton(){} public static Singleton getInstance(){ if(singleton == null){ singleton = new Singleton(); } return singleton; } } 懒汉式，即只有在第一次调用的时候才进行初始化
public class Singleton{ private static Singleton instance; private Singleton(){} public static synchronized Singleton getInstance(){ if(instance==null){ instance = new Singleton(); } return instance; } } 饿汉写法,在创建类的时候就完成初始化
public class Singleton{ private static Singleton instance = new Singleton(); private Singleton(){} public static Singleton getInstance(){ return instance; } } 双重校验锁，这个较为常考</description>
    </item>
    
    <item>
      <title>如何设计一个爬虫系统？</title>
      <link>https://carrymaniac.github.io/posts/scheduler/</link>
      <pubDate>Wed, 08 Apr 2020 15:25:42 +0800</pubDate>
      
      <guid>https://carrymaniac.github.io/posts/scheduler/</guid>
      <description>准确的来说，这篇文章并不算一个爬虫的教学，只是最近在复习之前学习的爬虫视频时做的笔记。
其中Engine、Scheduler、worker三者的关系大概如图
大体上结构如此，其中每个模块之间的数据传输均是使用chan来完成，比方说，Scheduler与Worker之间的Request传输使用一个chan string来传输，worker将处理完的数据传给Engine也是使用一个chan string来传输。
上面这个最简单的图，也可以衍生出不同的结构:
 所有的Worker共用同一个chan string从Scheduler来获取数据进行处理, 每个worker和Scheduler之间有一个不共享的chan string来传输数据，Scheduler里有两个队列来缓存请求以及可用的（指目前没有其他request请求需要处理可工作的）worker，当每次同时有请求和worker时，将请求分发给worker。  具体实现请看代码：
package scheduler import &amp;#34;fmt&amp;#34; //engine的主要行为，Run方法启动Engine，createWorker配置启动Worker type Engine interface { Run() createWorker(in chan string,out chan string,scheduler Scheduler) } type CurrentEngine struct { //调度器 	Scheduler Scheduler //工人数量 	WorkerCount int ItemChan chan string //用于存数据 	Processor Processor } //处理请求的函数,worker会调用这个Processor来进行处理数据 type Processor func(string) (string, error) func (c *CurrentEngine) createWorker(in chan string, out chan string, scheduler Scheduler) { //三个参数的含义 	//in chan string 用于 scheduler传输数据给worker进行处理 	//out chan string 用于worker处理完数据后将数据返回给Engine 	//scheduler Scheduler 当worker处理完成之后， 	//调用scheduler.</description>
    </item>
    
    <item>
      <title>如何使用Hugo&#43;GithubPage搭建一个简单的博客</title>
      <link>https://carrymaniac.github.io/posts/how/</link>
      <pubDate>Mon, 06 Apr 2020 15:52:49 +0800</pubDate>
      
      <guid>https://carrymaniac.github.io/posts/how/</guid>
      <description>起因是因为在搜go相关知识的时候，搜到了一个博客，样式很好看，心想着也要搭建一个人博客，原先是想着自己开发手写一个博客出来，但是思考了一下这样的造轮子没什么意义。因此开始折腾如何使用hugo来搭建一个个人博客。
第一步 下载安装hugo  这一部分建议参考 www.gohugo.org 这应该是一个Hugo粉丝自己的社区网站，在这里可以了解如何安装hugo mac用户用brew安装就行，会自动配置好env环境变量  第二步 配置Github Page  GithubPage的官方介绍：https://pages.github.com/ 简要的来说 就是创建好一个repository，主要是这个repository的名字需要写好，名字应该为username.github.io，项目的链接为https://github.com/username/username.github.io  第三步 Hugo站点 hugo new site changmen-blog # 新建一个叫changmen-blog的站点 hugo new post/my-first-post.md # 新建一篇叫my-first-post的文章，用markdown格式 //对文章进行编辑 hugo server -D # 启动本地服务器进行预览 # 此时可以使用127.0.0.1:1313进行预览博客样式 如果想对样式进行调整，可在hugo的样式库里面找到自己喜欢的主题，并按照其中的配置修改主目录下的config.toml，我现在用的是一个国人设计的hermit.
第四部 部署到git 首先使用hugo进行构建，默认将静态站点保存到 &amp;ldquo;public&amp;rdquo; 目录。
之后进入到public文件夹，git init进行初始化
git init ## 这里carrymaniac/carrymaniac.github.io记得换成你自己的 git remote add origin git@github.com:carrymaniac/carrymaniac.github.io ## 因为origin的master在创建的时候新建了个Readme，所以需要合并一下 git pull origin master --allow-unrelated-histories git status git add . git commit -m &amp;#34;add new post&amp;#34; git push -u origin master 此时便完成了一个人博客的部署</description>
    </item>
    
    <item>
      <title>Golang从入门到放弃</title>
      <link>https://carrymaniac.github.io/posts/go/</link>
      <pubDate>Mon, 06 Apr 2020 15:04:51 +0800</pubDate>
      
      <guid>https://carrymaniac.github.io/posts/go/</guid>
      <description>关于Go的工具链 go build 编译go文件 跨平台编译 env GOOS=linux GOARCH=amd64 go build
go install 也是编译 但是与build最大的不同在于会将文件输出打包在pkg目录下
go get 获取包 例如：go get -u xxx
go fmt 统一代码风格和排版
go test 测试 运行当前包目录下的tests，其中 go test -v 会打印详细信息
所用到框架：    类型 名称     web框架 gin   日志库 lexkong/log   配置 spf13/viper   JWT dgrijalva/jwt-go   数据库ORM gorm    关于fmt包    值 含义     %v 值的默认格式表示   %+v 类似%v，但输出结构体时会添加字段名   %#v 值的Go语法表示   %T 打印值的类型   %% 百分号   %b 表示为二进制   %c 该值对应的unicode码值   %d 表示为十进制   %e %E 科学计数法，如-1234.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://carrymaniac.github.io/about/</link>
      <pubDate>Mon, 06 Apr 2020 14:14:14 +0800</pubDate>
      
      <guid>https://carrymaniac.github.io/about/</guid>
      <description>你好，我是长门，这是我的个人博客，如果有建议或问题欢迎与我联系
联系方式：
 Email: 838537276@qq.com Github: https://github.com/carrymaniac  </description>
    </item>
    
  </channel>
</rss>