<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
	<channel>
		<title>Posts on UnhappyBrain</title>
		<link>https://carrymaniac.github.io/posts/</link>
		<description>Recent content in Posts on UnhappyBrain</description>
		<generator>Hugo -- gohugo.io</generator>
		<language>zh-hans</language>
		<copyright>This work is licensed under a Creative Commons Attribution-NonCommercial 4.0 International License.</copyright>
		<lastBuildDate>Mon, 27 Apr 2020 17:27:37 +0800</lastBuildDate>
		<atom:link href="https://carrymaniac.github.io/posts/index.xml" rel="self" type="application/rss+xml" />
		
		<item>
			<title>30分钟搭写一个聊天板</title>
			<link>https://carrymaniac.github.io/posts/my-chat/</link>
			<pubDate>Mon, 27 Apr 2020 17:27:37 +0800</pubDate>
			
			<guid>https://carrymaniac.github.io/posts/my-chat/</guid>
			<description>最近放假在家，无事学习了netty，写一个demo练手，快速编写一个简陋的聊天网页。
思路 基本的结构是后台采用netty，前端采用websocket和后台进行连接。
登陆：
 前端用户发请求到netty服务器，服务器进行校验，返回响应  聊天：
 前端用户将消息内容和聊天对象的ID以JSON报文的格式发给后台 后台经过Hadnler链拿到包，对里面的用户数据进行解析，并返回响应给用户前端 同时通过会话存储拿到聊天对象的channel并将消息发送给目标  本文阅读需要有对netty基础的了解，以及一点点前端websocket的知识
后台部分 创建服务器启动类：
package com.gdou.im.server; import com.gdou.im.server.handler.WebSocketHandler; import com.gdou.im.server.handler.LoginRequestHandler; import com.gdou.im.server.handler.MessageRequestHandler; import io.netty.bootstrap.ServerBootstrap; import io.netty.channel.ChannelFuture; import io.netty.channel.ChannelInitializer; import io.netty.channel.nio.NioEventLoopGroup; import io.netty.channel.socket.nio.NioServerSocketChannel; import io.netty.channel.socket.nio.NioSocketChannel; import io.netty.handler.codec.http.HttpObjectAggregator; import io.netty.handler.codec.http.HttpServerCodec; import io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler; import io.netty.handler.stream.ChunkedWriteHandler; /** * @ProjectName: demo * @Package: com.gdou.im.server * @ClassName: NettyServer * @Author: carrymaniac * @Description: netty的服务器端 * @Date: 2020/1/4 1:08 下午 * @Version: */ public class NettyServer { public static void main(String[] args) throws InterruptedException { //定义线程组  NioEventLoopGroup bossGroup = new NioEventLoopGroup(); NioEventLoopGroup workerGroup = new NioEventLoopGroup(); final ServerBootstrap serverBootstrap = new ServerBootstrap(); serverBootstrap.</description>
			<content type="html"><![CDATA[<p>最近放假在家，无事学习了netty，写一个demo练手，快速编写一个简陋的聊天网页。</p>
<h2 id="思路">思路</h2>
<p>基本的结构是后台采用netty，前端采用websocket和后台进行连接。</p>
<p>登陆：</p>
<ul>
<li>前端用户发请求到netty服务器，服务器进行校验，返回响应</li>
</ul>
<p>聊天：</p>
<ul>
<li>前端用户将消息内容和聊天对象的ID以JSON报文的格式发给后台</li>
<li>后台经过Hadnler链拿到包，对里面的用户数据进行解析，并返回响应给用户前端</li>
<li>同时通过会话存储拿到聊天对象的channel并将消息发送给目标</li>
</ul>
<p>本文阅读需要有对netty基础的了解，以及一点点前端websocket的知识</p>
<h2 id="后台部分">后台部分</h2>
<p>创建服务器启动类：</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.gdou.im.server</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.gdou.im.server.handler.WebSocketHandler</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.server.handler.LoginRequestHandler</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.server.handler.MessageRequestHandler</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.bootstrap.ServerBootstrap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.channel.ChannelFuture</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.channel.ChannelInitializer</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.channel.nio.NioEventLoopGroup</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.channel.socket.nio.NioServerSocketChannel</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.channel.socket.nio.NioSocketChannel</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.handler.codec.http.HttpObjectAggregator</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.handler.codec.http.HttpServerCodec</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.handler.codec.http.websocketx.WebSocketServerProtocolHandler</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.handler.stream.ChunkedWriteHandler</span><span class="o">;</span>

<span class="cm">/**
</span><span class="cm"> * @ProjectName: demo
</span><span class="cm"> * @Package: com.gdou.im.server
</span><span class="cm"> * @ClassName: NettyServer
</span><span class="cm"> * @Author: carrymaniac
</span><span class="cm"> * @Description: netty的服务器端
</span><span class="cm"> * @Date: 2020/1/4 1:08 下午
</span><span class="cm"> * @Version:
</span><span class="cm"> */</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">NettyServer</span> <span class="o">{</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">main</span><span class="o">(</span><span class="n">String</span><span class="o">[]</span> <span class="n">args</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">InterruptedException</span> <span class="o">{</span>
        <span class="c1">//定义线程组
</span><span class="c1"></span>        <span class="n">NioEventLoopGroup</span> <span class="n">bossGroup</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NioEventLoopGroup</span><span class="o">();</span>
        <span class="n">NioEventLoopGroup</span> <span class="n">workerGroup</span> <span class="o">=</span> <span class="k">new</span> <span class="n">NioEventLoopGroup</span><span class="o">();</span>
        <span class="kd">final</span> <span class="n">ServerBootstrap</span> <span class="n">serverBootstrap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ServerBootstrap</span><span class="o">();</span>
        <span class="n">serverBootstrap</span><span class="o">.</span><span class="na">group</span><span class="o">(</span><span class="n">bossGroup</span><span class="o">,</span><span class="n">workerGroup</span><span class="o">)</span>
                <span class="o">.</span><span class="na">channel</span><span class="o">(</span><span class="n">NioServerSocketChannel</span><span class="o">.</span><span class="na">class</span><span class="o">)</span>
                <span class="o">.</span><span class="na">childHandler</span><span class="o">(</span><span class="k">new</span> <span class="n">ChannelInitializer</span><span class="o">&lt;</span><span class="n">NioSocketChannel</span><span class="o">&gt;(){</span>
                    <span class="nd">@Override</span>
                    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">initChannel</span><span class="o">(</span><span class="n">NioSocketChannel</span> <span class="n">ch</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
                        <span class="c1">//Http编解码器，HttpServerCodec()
</span><span class="c1"></span>                        <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpServerCodec</span><span class="o">());</span>
                        <span class="c1">//大数据流处理
</span><span class="c1"></span>                        <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">ChunkedWriteHandler</span><span class="o">());</span>
                        <span class="c1">//HttpObjectAggregator：聚合器，聚合了FullHTTPRequest、FullHTTPResponse。。。，当你不想去管一些HttpMessage的时候，直接把这个handler丢到管道中，让Netty自行处理即可
</span><span class="c1"></span>                        <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">HttpObjectAggregator</span><span class="o">(</span><span class="n">2048</span><span class="o">*</span><span class="n">64</span><span class="o">));</span>
                        <span class="c1">//WebSocketServerProtocolHandler：给客户端指定访问的路由（/ws），是服务器端处理的协议，当前的处理器处理一些繁重的复杂的东西，运行在一个WebSocket服务端
</span><span class="c1"></span>                        <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">WebSocketServerProtocolHandler</span><span class="o">(</span><span class="s">&#34;/ws&#34;</span><span class="o">));</span>
                        <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">WebSocketHandler</span><span class="o">());</span>
                        <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">MessageRequestHandler</span><span class="o">());</span>
                        <span class="n">ch</span><span class="o">.</span><span class="na">pipeline</span><span class="o">().</span><span class="na">addLast</span><span class="o">(</span><span class="k">new</span> <span class="n">LoginRequestHandler</span><span class="o">());</span>

                    <span class="o">}</span>
                <span class="o">});</span>
        <span class="n">ChannelFuture</span> <span class="n">future</span> <span class="o">=</span> <span class="n">serverBootstrap</span><span class="o">.</span><span class="na">bind</span><span class="o">(</span><span class="n">8080</span><span class="o">).</span><span class="na">sync</span><span class="o">();</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>其中，里面的WebSocketHandler、MessageRequestHandler、LoginRequestHandler是自定义的handler，下面分别展示：</p>
<h3 id="websockethandler">WebSocketHandler</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.gdou.im.server.handler</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.alibaba.fastjson.JSONObject</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.protocol.PacketCodeC</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.protocol.data.Data</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.protocol.data.request.LoginRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.protocol.data.request.MessageRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.protocol.Packet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.channel.ChannelHandlerContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.channel.SimpleChannelInboundHandler</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.channel.group.ChannelGroup</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.channel.group.DefaultChannelGroup</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.handler.codec.http.websocketx.TextWebSocketFrame</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.util.concurrent.GlobalEventExecutor</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>

<span class="cm">/**
</span><span class="cm"> * @ProjectName: demo
</span><span class="cm"> * @Package: com.gdou.im.server.handler
</span><span class="cm"> * @ClassName: ChatHandler
</span><span class="cm"> * @Author: carrymaniac
</span><span class="cm"> * @Description: ChatHandler
</span><span class="cm"> * @Date: 2020/1/28 12:01 上午
</span><span class="cm"> * @Version:
</span><span class="cm"> */</span>
<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">WebSocketHandler</span> <span class="kd">extends</span> <span class="n">SimpleChannelInboundHandler</span><span class="o">&lt;</span><span class="n">TextWebSocketFrame</span><span class="o">&gt;{</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">channelRead0</span><span class="o">(</span><span class="n">ChannelHandlerContext</span> <span class="n">ctx</span><span class="o">,</span> <span class="n">TextWebSocketFrame</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">String</span> <span class="n">text</span> <span class="o">=</span> <span class="n">msg</span><span class="o">.</span><span class="na">text</span><span class="o">();</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;接收到了websocket包,内容为:{}&#34;</span><span class="o">,</span><span class="n">text</span><span class="o">);</span>
        <span class="n">Packet</span> <span class="n">packet</span> <span class="o">=</span> <span class="n">JSONObject</span><span class="o">.</span><span class="na">parseObject</span><span class="o">(</span><span class="n">text</span><span class="o">,</span> <span class="n">Packet</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
        <span class="k">if</span><span class="o">(</span><span class="n">packet</span><span class="o">!=</span><span class="kc">null</span><span class="o">){</span>
            <span class="n">Data</span> <span class="n">decode</span> <span class="o">=</span> <span class="n">PacketCodeC</span><span class="o">.</span><span class="na">INSTANCE</span><span class="o">.</span><span class="na">decode</span><span class="o">(</span><span class="n">packet</span><span class="o">);</span>
            <span class="c1">//分发到下一个Handler
</span><span class="c1"></span>            <span class="k">if</span><span class="o">(</span><span class="n">decode</span> <span class="k">instanceof</span> <span class="n">MessageRequest</span><span class="o">){</span>
                <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;向下转型完成,内容为:{}&#34;</span><span class="o">,</span><span class="n">decode</span><span class="o">);</span>
                <span class="n">ctx</span><span class="o">.</span><span class="na">fireChannelRead</span><span class="o">((</span><span class="n">MessageRequest</span><span class="o">)</span><span class="n">decode</span><span class="o">);</span>
            <span class="o">}</span><span class="k">else</span> <span class="k">if</span><span class="o">(</span><span class="n">decode</span> <span class="k">instanceof</span> <span class="n">LoginRequest</span><span class="o">){</span>
                <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;向下转型完成,内容为:{}&#34;</span><span class="o">,</span><span class="n">decode</span><span class="o">);</span>
                <span class="n">ctx</span><span class="o">.</span><span class="na">fireChannelRead</span><span class="o">((</span><span class="n">LoginRequest</span><span class="o">)</span><span class="n">decode</span><span class="o">);</span>
            <span class="o">}</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>WebSocketHandler主要职责是用于接收Handler链WebSocketServerProtocolHandler发下来的TextWebSocketFrame，解析其中的JSON正文为Packet (java对象)，然后转化为对应的每一个Request对象发送到Handler链的下一个Handler进行处理。</p>
<h3 id="loginrequesthandler">LoginRequestHandler</h3>
<p>LoginRequestHandler主要用于处理WebSocketHandler发下来的MessageRequest数据，并生成LoginResponse响应将登陆情况发回给用户。</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.gdou.im.server.handler</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.alibaba.fastjson.JSONObject</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.protocol.Packet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.protocol.data.request.LoginRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.protocol.data.response.LoginResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.session.Session</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.util.SessionUtil</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.channel.ChannelHandlerContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.channel.SimpleChannelInboundHandler</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.handler.codec.http.websocketx.TextWebSocketFrame</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.UUID</span><span class="o">;</span>

<span class="kn">import static</span> <span class="nn">com.gdou.im.protocol.command.Command.LOGIN_RESPONSE</span><span class="o">;</span>

<span class="cm">/**
</span><span class="cm"> * @ProjectName: demo
</span><span class="cm"> * @Package: com.gdou.im.server.handler
</span><span class="cm"> * @ClassName: LoginRequestHandler
</span><span class="cm"> * @Author: carrymaniac
</span><span class="cm"> * @Description:
</span><span class="cm"> * @Date: 2020/1/28 1:34 下午
</span><span class="cm"> * @Version:
</span><span class="cm"> */</span>
<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">LoginRequestHandler</span> <span class="kd">extends</span> <span class="n">SimpleChannelInboundHandler</span><span class="o">&lt;</span><span class="n">LoginRequest</span><span class="o">&gt;</span> <span class="o">{</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">channelRead0</span><span class="o">(</span><span class="n">ChannelHandlerContext</span> <span class="n">ctx</span><span class="o">,</span> <span class="n">LoginRequest</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">LoginResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">LoginResponse</span><span class="o">();</span>
        <span class="n">Packet</span> <span class="n">packet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Packet</span><span class="o">();</span>
      <span class="c1">//校验用户名和密码合法，这里没有实现，可以自行加入数据库校验等实现
</span><span class="c1"></span>        <span class="k">if</span><span class="o">(</span><span class="n">valid</span><span class="o">(</span><span class="n">msg</span><span class="o">)){</span>
            <span class="c1">//随机生成ID
</span><span class="c1"></span>            <span class="n">String</span> <span class="n">userId</span> <span class="o">=</span> <span class="n">randomUserId</span><span class="o">();</span>
            <span class="n">response</span><span class="o">.</span><span class="na">setSuccess</span><span class="o">(</span><span class="kc">true</span><span class="o">);</span>
            <span class="n">response</span><span class="o">.</span><span class="na">setUserId</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span>
            <span class="n">response</span><span class="o">.</span><span class="na">setUserName</span><span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">getUserName</span><span class="o">());</span>
            <span class="c1">//绑定session和channel，将用户信息和对应的channel进行绑定，以供之后使用
</span><span class="c1"></span>            <span class="n">SessionUtil</span><span class="o">.</span><span class="na">bindSession</span><span class="o">(</span><span class="k">new</span> <span class="n">Session</span><span class="o">(</span><span class="n">userId</span><span class="o">,</span><span class="n">msg</span><span class="o">.</span><span class="na">getUserName</span><span class="o">()),</span><span class="n">ctx</span><span class="o">.</span><span class="na">channel</span><span class="o">());</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;用户:{}登陆成功&#34;</span><span class="o">,</span><span class="n">msg</span><span class="o">.</span><span class="na">getUserName</span><span class="o">());</span>
            <span class="c1">//进行广播，对所有在线的成员channel发送一条消息
</span><span class="c1"></span>            <span class="n">SessionUtil</span><span class="o">.</span><span class="na">broadcast</span><span class="o">(</span><span class="s">&#34;用户: &#34;</span><span class="o">+</span><span class="n">msg</span><span class="o">.</span><span class="na">getUserName</span><span class="o">()+</span><span class="s">&#34;已上线,他的ID为: &#34;</span><span class="o">+</span><span class="n">userId</span><span class="o">);</span>
        <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
            <span class="n">response</span><span class="o">.</span><span class="na">setReason</span><span class="o">(</span><span class="s">&#34;账号密码校验失败&#34;</span><span class="o">);</span>
            <span class="n">response</span><span class="o">.</span><span class="na">setSuccess</span><span class="o">(</span><span class="kc">false</span><span class="o">);</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;用户:{}登陆失败&#34;</span><span class="o">,</span><span class="n">msg</span><span class="o">.</span><span class="na">getUserName</span><span class="o">());</span>
        <span class="o">}</span>
        <span class="n">packet</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">JSONObject</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">response</span><span class="o">));</span>
        <span class="n">packet</span><span class="o">.</span><span class="na">setCommand</span><span class="o">(</span><span class="n">LOGIN_RESPONSE</span><span class="o">);</span>
      <span class="c1">//将登陆成功的消息发给用户
</span><span class="c1"></span>        <span class="n">ctx</span><span class="o">.</span><span class="na">channel</span><span class="o">().</span><span class="na">writeAndFlush</span><span class="o">(</span><span class="k">new</span> <span class="n">TextWebSocketFrame</span><span class="o">(</span><span class="n">JSONObject</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">packet</span><span class="o">)));</span>

    <span class="o">}</span>


    <span class="cm">/**
</span><span class="cm">     * 进行登陆校验，todo 之后可以在这个方法中加入数据库进行校验
</span><span class="cm">     * @param loginRequest
</span><span class="cm">     * @return
</span><span class="cm">     */</span>
    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">valid</span><span class="o">(</span><span class="n">LoginRequest</span> <span class="n">loginRequest</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

 		<span class="c1">//生成一个用户ID
</span><span class="c1"></span>    <span class="kd">private</span> <span class="kd">static</span> <span class="n">String</span> <span class="nf">randomUserId</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">UUID</span><span class="o">.</span><span class="na">randomUUID</span><span class="o">().</span><span class="na">toString</span><span class="o">().</span><span class="na">split</span><span class="o">(</span><span class="s">&#34;-&#34;</span><span class="o">)[</span><span class="n">0</span><span class="o">];</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * channel没有链接到远程节点的时候
</span><span class="cm">     * @param ctx
</span><span class="cm">     * @throws Exception
</span><span class="cm">     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">channelInactive</span><span class="o">(</span><span class="n">ChannelHandlerContext</span> <span class="n">ctx</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
      <span class="c1">//当用户断开连接时，需要将其session和channel移除
</span><span class="c1"></span>        <span class="n">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">SessionUtil</span><span class="o">.</span><span class="na">getSession</span><span class="o">(</span><span class="n">ctx</span><span class="o">.</span><span class="na">channel</span><span class="o">());</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;用户{}下线了，移除其session&#34;</span><span class="o">,</span><span class="n">session</span><span class="o">.</span><span class="na">getUserName</span><span class="o">());</span>
        <span class="n">SessionUtil</span><span class="o">.</span><span class="na">unBindSession</span><span class="o">(</span><span class="n">ctx</span><span class="o">.</span><span class="na">channel</span><span class="o">());</span>
        <span class="n">SessionUtil</span><span class="o">.</span><span class="na">broadcast</span><span class="o">(</span><span class="s">&#34;用户: &#34;</span><span class="o">+</span><span class="n">session</span><span class="o">.</span><span class="na">getUserName</span><span class="o">()+</span><span class="s">&#34;已下线&#34;</span><span class="o">);</span>
    <span class="o">}</span>

</code></pre></div><h3 id="messagerequesthandler">MessageRequestHandler</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.gdou.im.server.handler</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.alibaba.fastjson.JSONObject</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.protocol.Packet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.protocol.command.Command</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.protocol.data.Data</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.protocol.data.request.MessageRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.protocol.data.response.MessageResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.session.Session</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.util.SessionUtil</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.channel.Channel</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.channel.ChannelHandlerContext</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.channel.SimpleChannelInboundHandler</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.handler.codec.http.websocketx.TextWebSocketFrame</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>

<span class="cm">/**
</span><span class="cm"> * @ProjectName: demo
</span><span class="cm"> * @Package: com.gdou.im.server.handler
</span><span class="cm"> * @ClassName: DataHandler
</span><span class="cm"> * @Author: carrymaniac
</span><span class="cm"> * @Description:
</span><span class="cm"> * @Date: 2020/1/28 1:15 下午
</span><span class="cm"> * @Version:
</span><span class="cm"> */</span>
<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">MessageRequestHandler</span> <span class="kd">extends</span> <span class="n">SimpleChannelInboundHandler</span><span class="o">&lt;</span><span class="n">MessageRequest</span><span class="o">&gt;</span> <span class="o">{</span>
    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">channelRead0</span><span class="o">(</span><span class="n">ChannelHandlerContext</span> <span class="n">ctx</span><span class="o">,</span> <span class="n">MessageRequest</span> <span class="n">msg</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;拿到了数据，到达此处了:{}&#34;</span><span class="o">,</span><span class="n">msg</span><span class="o">);</span>
        <span class="c1">//通过channel获取到用户的信息
</span><span class="c1"></span>        <span class="n">Session</span> <span class="n">session</span> <span class="o">=</span> <span class="n">SessionUtil</span><span class="o">.</span><span class="na">getSession</span><span class="o">(</span><span class="n">ctx</span><span class="o">.</span><span class="na">channel</span><span class="o">());</span>
        <span class="c1">//开始写回去
</span><span class="c1"></span>        <span class="n">Packet</span> <span class="n">packetForConfirm</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Packet</span><span class="o">();</span>
        <span class="n">packetForConfirm</span><span class="o">.</span><span class="na">setCommand</span><span class="o">(</span><span class="n">Command</span><span class="o">.</span><span class="na">MESSAGE_RESPONSE</span><span class="o">);</span>
        <span class="n">MessageResponse</span> <span class="n">responseForConfirm</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MessageResponse</span><span class="o">();</span>
        <span class="n">responseForConfirm</span><span class="o">.</span><span class="na">setMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
        <span class="n">responseForConfirm</span><span class="o">.</span><span class="na">setFromUserName</span><span class="o">(</span><span class="s">&#34;你&#34;</span><span class="o">);</span>
        <span class="n">packetForConfirm</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">JSONObject</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">responseForConfirm</span><span class="o">));</span>
        <span class="n">ctx</span><span class="o">.</span><span class="na">channel</span><span class="o">().</span><span class="na">writeAndFlush</span><span class="o">(</span><span class="k">new</span> <span class="n">TextWebSocketFrame</span><span class="o">(</span><span class="n">JSONObject</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">packetForConfirm</span><span class="o">)));</span>

        <span class="c1">//构建response,将消息发送给用户要发送的id用户
</span><span class="c1"></span>        <span class="c1">//通过toId获取channel
</span><span class="c1"></span>        <span class="n">Channel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">SessionUtil</span><span class="o">.</span><span class="na">getChannel</span><span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">getToId</span><span class="o">());</span>
        <span class="k">if</span><span class="o">(</span><span class="n">channel</span><span class="o">!=</span><span class="kc">null</span><span class="o">&amp;&amp;</span> <span class="n">SessionUtil</span><span class="o">.</span><span class="na">hasLogin</span><span class="o">(</span><span class="n">channel</span><span class="o">)){</span>
          <span class="c1">//toID的用户在线，构建包发回给用户
</span><span class="c1"></span>            <span class="n">MessageResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MessageResponse</span><span class="o">();</span>
            <span class="n">response</span><span class="o">.</span><span class="na">setFromUserId</span><span class="o">(</span><span class="n">session</span><span class="o">.</span><span class="na">getUserId</span><span class="o">());</span>
            <span class="n">response</span><span class="o">.</span><span class="na">setFromUserName</span><span class="o">(</span><span class="n">session</span><span class="o">.</span><span class="na">getUserName</span><span class="o">());</span>
            <span class="n">response</span><span class="o">.</span><span class="na">setMessage</span><span class="o">(</span><span class="n">msg</span><span class="o">.</span><span class="na">getMessage</span><span class="o">());</span>
            <span class="n">Packet</span> <span class="n">packetForToId</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Packet</span><span class="o">();</span>
            <span class="n">packetForToId</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">JSONObject</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">response</span><span class="o">));</span>
            <span class="n">packetForToId</span><span class="o">.</span><span class="na">setCommand</span><span class="o">(</span><span class="n">Command</span><span class="o">.</span><span class="na">MESSAGE_RESPONSE</span><span class="o">);</span>
            <span class="n">channel</span><span class="o">.</span><span class="na">writeAndFlush</span><span class="o">(</span><span class="k">new</span> <span class="n">TextWebSocketFrame</span><span class="o">(</span><span class="n">JSONObject</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">packetForToId</span><span class="o">)));</span>
        <span class="o">}</span><span class="k">else</span> <span class="o">{</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;用户并不在线&#34;</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>到这，三个最重要的handler就介绍完成，还有一个比较重要的部分就是SessionUtil部分：</p>
<h3 id="sessionutil">SessionUtil</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">//Session.java
</span><span class="c1"></span><span class="nd">@Data</span>
<span class="nd">@NoArgsConstructor</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">Session</span> <span class="o">{</span>
    <span class="c1">// 用户唯一性标识
</span><span class="c1"></span>    <span class="kd">private</span> <span class="n">String</span> <span class="n">userId</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">userName</span><span class="o">;</span>

    <span class="kd">public</span> <span class="nf">Session</span><span class="o">(</span><span class="n">String</span> <span class="n">userId</span><span class="o">,</span> <span class="n">String</span> <span class="n">userName</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">this</span><span class="o">.</span><span class="na">userId</span> <span class="o">=</span> <span class="n">userId</span><span class="o">;</span>
        <span class="k">this</span><span class="o">.</span><span class="na">userName</span> <span class="o">=</span> <span class="n">userName</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">toString</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userId</span> <span class="o">+</span> <span class="s">&#34;:&#34;</span> <span class="o">+</span> <span class="n">userName</span><span class="o">;</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">//SessionUtil.java
</span><span class="c1"></span><span class="kn">package</span> <span class="nn">com.gdou.im.util</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.alibaba.fastjson.JSONObject</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.attribute.Attributes</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.protocol.Packet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.protocol.data.response.MessageResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.im.session.Session</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.channel.Channel</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.netty.handler.codec.http.websocketx.TextWebSocketFrame</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Set</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.concurrent.ConcurrentHashMap</span><span class="o">;</span>

<span class="kn">import static</span> <span class="nn">com.gdou.im.protocol.command.Command.SYSTEM_MESSAGE_RESPONSE</span><span class="o">;</span>

<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SessionUtil</span> <span class="o">{</span>
  	<span class="c1">//用于存储用户ID---&gt;channel的对应关系
</span><span class="c1"></span>    <span class="kd">private</span> <span class="kd">static</span> <span class="kd">final</span> <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Channel</span><span class="o">&gt;</span> <span class="n">userIdChannelMap</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ConcurrentHashMap</span><span class="o">&lt;&gt;();</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">bindSession</span><span class="o">(</span><span class="n">Session</span> <span class="n">session</span><span class="o">,</span> <span class="n">Channel</span> <span class="n">channel</span><span class="o">)</span> <span class="o">{</span>
      <span class="c1">//在map中存放绑定关系
</span><span class="c1"></span>        <span class="n">userIdChannelMap</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">session</span><span class="o">.</span><span class="na">getUserId</span><span class="o">(),</span> <span class="n">channel</span><span class="o">);</span>
      <span class="c1">//在channel中存储用户信息
</span><span class="c1"></span>        <span class="n">channel</span><span class="o">.</span><span class="na">attr</span><span class="o">(</span><span class="n">Attributes</span><span class="o">.</span><span class="na">SESSION</span><span class="o">).</span><span class="na">set</span><span class="o">(</span><span class="n">session</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">unBindSession</span><span class="o">(</span><span class="n">Channel</span> <span class="n">channel</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">if</span> <span class="o">(</span><span class="n">hasLogin</span><span class="o">(</span><span class="n">channel</span><span class="o">))</span> <span class="o">{</span>
          <span class="c1">//解除绑定
</span><span class="c1"></span>            <span class="n">userIdChannelMap</span><span class="o">.</span><span class="na">remove</span><span class="o">(</span><span class="n">getSession</span><span class="o">(</span><span class="n">channel</span><span class="o">).</span><span class="na">getUserId</span><span class="o">());</span>
            <span class="n">channel</span><span class="o">.</span><span class="na">attr</span><span class="o">(</span><span class="n">Attributes</span><span class="o">.</span><span class="na">SESSION</span><span class="o">).</span><span class="na">set</span><span class="o">(</span><span class="kc">null</span><span class="o">);</span>
        <span class="o">}</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">boolean</span> <span class="nf">hasLogin</span><span class="o">(</span><span class="n">Channel</span> <span class="n">channel</span><span class="o">)</span> <span class="o">{</span>

        <span class="k">return</span> <span class="n">channel</span><span class="o">.</span><span class="na">hasAttr</span><span class="o">(</span><span class="n">Attributes</span><span class="o">.</span><span class="na">SESSION</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Session</span> <span class="nf">getSession</span><span class="o">(</span><span class="n">Channel</span> <span class="n">channel</span><span class="o">)</span> <span class="o">{</span>

        <span class="k">return</span> <span class="n">channel</span><span class="o">.</span><span class="na">attr</span><span class="o">(</span><span class="n">Attributes</span><span class="o">.</span><span class="na">SESSION</span><span class="o">).</span><span class="na">get</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Channel</span> <span class="nf">getChannel</span><span class="o">(</span><span class="n">String</span> <span class="n">userId</span><span class="o">)</span> <span class="o">{</span>

        <span class="k">return</span> <span class="n">userIdChannelMap</span><span class="o">.</span><span class="na">get</span><span class="o">(</span><span class="n">userId</span><span class="o">);</span>
    <span class="o">}</span>

  <span class="c1">//广播
</span><span class="c1"></span>    <span class="kd">public</span> <span class="kd">static</span> <span class="kt">void</span> <span class="nf">broadcast</span><span class="o">(</span><span class="n">String</span> <span class="n">message</span><span class="o">){</span>
        <span class="n">Packet</span> <span class="n">packet</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Packet</span><span class="o">();</span>
        <span class="n">packet</span><span class="o">.</span><span class="na">setCommand</span><span class="o">(</span><span class="n">SYSTEM_MESSAGE_RESPONSE</span><span class="o">);</span>
        <span class="n">MessageResponse</span> <span class="n">response</span> <span class="o">=</span> <span class="k">new</span> <span class="n">MessageResponse</span><span class="o">();</span>
        <span class="n">response</span><span class="o">.</span><span class="na">setMessage</span><span class="o">(</span><span class="n">message</span><span class="o">);</span>
        <span class="n">response</span><span class="o">.</span><span class="na">setFromUserName</span><span class="o">(</span><span class="s">&#34;系统提醒&#34;</span><span class="o">);</span>
        <span class="n">packet</span><span class="o">.</span><span class="na">setData</span><span class="o">(</span><span class="n">JSONObject</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">response</span><span class="o">));</span>
        <span class="n">Set</span><span class="o">&lt;</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Channel</span><span class="o">&gt;&gt;</span> <span class="n">entries</span> <span class="o">=</span> <span class="n">userIdChannelMap</span><span class="o">.</span><span class="na">entrySet</span><span class="o">();</span>
        <span class="k">for</span><span class="o">(</span><span class="n">Map</span><span class="o">.</span><span class="na">Entry</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span> <span class="n">Channel</span><span class="o">&gt;</span> <span class="n">entry</span> <span class="o">:</span><span class="n">entries</span><span class="o">){</span>
            <span class="n">Channel</span> <span class="n">channel</span> <span class="o">=</span> <span class="n">entry</span><span class="o">.</span><span class="na">getValue</span><span class="o">();</span>
            <span class="n">channel</span><span class="o">.</span><span class="na">writeAndFlush</span><span class="o">(</span><span class="k">new</span> <span class="n">TextWebSocketFrame</span><span class="o">(</span><span class="n">JSONObject</span><span class="o">.</span><span class="na">toJSONString</span><span class="o">(</span><span class="n">packet</span><span class="o">)));</span>
        <span class="o">}</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div><p>其余的后台代码比较简单，请参考我的github仓库的代码。</p>
<h2 id="前端部分">前端部分</h2>
<p>前端部分因为本人没学过前端，因此写的比较稀烂，仅供参考：</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html">
<span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span><span class="p">&gt;</span>
	<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;utf-8&#34;</span> <span class="p">/&gt;</span>
		<span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>小聊天室DEMO<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
	<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
	<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
		用户名:<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;userName&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;userName&#34;</span><span class="p">/&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
		用户密码:<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;password&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;userPassword&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;userPassword&#34;</span><span class="p">/&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;button&#34;</span> <span class="na">onclick</span><span class="o">=</span><span class="s">&#34;CHAT.login()&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;loginButton&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;loginButton&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;登陆&#34;</span><span class="p">/&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>发送消息：<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
		发送ID:<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;toId&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;toId&#34;</span><span class="p">/&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
		发送内容:<span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;messageContent&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;messageContent&#34;</span><span class="p">/&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">input</span>  <span class="na">type</span><span class="o">=</span><span class="s">&#34;button&#34;</span> <span class="na">onclick</span><span class="o">=</span><span class="s">&#34;CHAT.chat()&#34;</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;sendButton&#34;</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;sendButton&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;发送消息&#34;</span> <span class="p">/&gt;</span>
		<span class="p">&lt;</span><span class="nt">hr</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>接收消息列表：<span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;&lt;</span><span class="nt">br</span><span class="p">&gt;</span>
		<span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;receiveNsg&#34;</span> <span class="na">style</span><span class="o">=</span><span class="s">&#34;background-color: gainsboro;&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
		
		
		<span class="p">&lt;</span><span class="nt">script</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;text/javascript&#34;</span><span class="p">&gt;</span>
			<span class="kd">var</span> <span class="nx">user</span> <span class="o">=</span> <span class="p">{</span>
				<span class="nx">name</span><span class="o">:</span><span class="kc">null</span><span class="p">,</span>
				<span class="nx">id</span><span class="o">:</span><span class="kc">null</span>
			<span class="p">}</span>
			<span class="kd">var</span> <span class="nx">COMMAND_CODE</span> <span class="o">=</span> <span class="p">{</span>
					<span class="c1">//登陆请求
</span><span class="c1"></span>					<span class="nx">LOGIN_REQUEST</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span>
					<span class="c1">// 登陆消息响应
</span><span class="c1"></span>					<span class="nx">LOGIN_RESPONSE</span><span class="o">:</span><span class="mi">2</span><span class="p">,</span>
					<span class="c1">// 普通消息请求
</span><span class="c1"></span>					<span class="nx">MESSAGE_REQUEST</span><span class="o">:</span><span class="mi">3</span><span class="p">,</span>
					<span class="c1">// 普通消息响应
</span><span class="c1"></span>					<span class="nx">MESSAGE_RESPONSE</span><span class="o">:</span><span class="mi">4</span><span class="p">,</span>
					<span class="c1">// 系统消息响应
</span><span class="c1"></span>					<span class="nx">SYSTEM_RESPONSE</span><span class="o">:-</span><span class="mi">1</span>
				<span class="p">},</span>
			<span class="nx">_this</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
			<span class="nb">window</span><span class="p">.</span><span class="nx">CHAT</span> <span class="o">=</span> <span class="p">{</span>
				<span class="nx">socket</span><span class="o">:</span> <span class="kc">null</span><span class="p">,</span>
				<span class="c1">//初始化
</span><span class="c1"></span>				<span class="nx">init</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
					<span class="c1">//首先判断浏览器是否支持WebSocket
</span><span class="c1"></span>					<span class="k">if</span> <span class="p">(</span><span class="nb">window</span><span class="p">.</span><span class="nx">WebSocket</span><span class="p">){</span>
						<span class="nx">that</span> <span class="o">=</span> <span class="k">this</span><span class="p">;</span>
						<span class="nx">CHAT</span><span class="p">.</span><span class="nx">socket</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">WebSocket</span><span class="p">(</span><span class="s2">&#34;ws://localhost:8080/ws&#34;</span><span class="p">);</span>
						<span class="nx">CHAT</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">onopen</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
							<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;客户端与服务端建立连接成功&#34;</span><span class="p">);</span>
						<span class="p">},</span>
						<span class="nx">CHAT</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">onmessage</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(</span><span class="nx">e</span><span class="p">){</span>
							<span class="kd">var</span> <span class="nx">receiveNsg</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;receiveNsg&#34;</span><span class="p">);</span>
							<span class="kd">var</span> <span class="nx">html</span> <span class="o">=</span> <span class="nx">receiveNsg</span><span class="p">.</span><span class="nx">innerHTML</span><span class="p">;</span>
							<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;接收到消息：&#34;</span><span class="o">+</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
							<span class="kd">var</span> <span class="nx">response</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">e</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
							<span class="c1">// 说明是登陆的返回消息
</span><span class="c1"></span>							<span class="k">if</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">command</span><span class="o">==</span><span class="nx">_this</span><span class="p">.</span><span class="nx">COMMAND_CODE</span><span class="p">.</span><span class="nx">LOGIN_RESPONSE</span><span class="p">){</span>
								<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
								<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">result</span><span class="p">);</span>
								<span class="k">if</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">success</span><span class="o">==</span><span class="kc">true</span><span class="p">){</span>
									<span class="nx">_this</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">name</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">userName</span><span class="p">;</span>
									<span class="nx">_this</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">id</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">userId</span><span class="p">;</span>
									<span class="nx">receiveNsg</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">html</span> <span class="o">+</span> <span class="s2">&#34;&lt;br&gt;&#34;</span> <span class="o">+</span> 
									<span class="s2">&#34;用户登陆成功，您的ID为：&#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">userId</span><span class="o">+</span><span class="s2">&#34;,快去告诉你的朋友吧&#34;</span><span class="p">;</span>
									<span class="k">return</span><span class="p">;</span>
								<span class="p">}</span><span class="k">else</span><span class="p">{</span>
									<span class="nx">receiveNsg</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">html</span> <span class="o">+</span> <span class="s2">&#34;&lt;br&gt;&#34;</span> <span class="o">+</span> 
									<span class="s2">&#34;用户登陆失败，原因是：&#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">reason</span><span class="p">;</span>
								<span class="p">}</span>
							<span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">command</span><span class="o">==</span><span class="nx">_this</span><span class="p">.</span><span class="nx">COMMAND_CODE</span><span class="p">.</span><span class="nx">MESSAGE_RESPONSE</span><span class="p">){</span>
								<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
								<span class="nx">receiveNsg</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">html</span> <span class="o">+</span> <span class="s2">&#34;&lt;br&gt;&#34;</span> <span class="o">+</span> 
									<span class="s2">&#34;[&#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">fromUserName</span><span class="o">+</span><span class="s2">&#34;]&#34;</span><span class="o">+</span><span class="s2">&#34;说：&#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">message</span><span class="p">;</span>
								<span class="c1">// 将ID设置到发送id框上去
</span><span class="c1"></span>								<span class="kd">var</span> <span class="nx">toId</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;toId&#34;</span><span class="p">);</span>
								<span class="k">if</span><span class="p">(</span><span class="nx">result</span><span class="p">.</span><span class="nx">fromUserId</span><span class="o">!=</span><span class="nx">_this</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">){</span>
									<span class="nx">toId</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">fromUserId</span><span class="p">;</span>
								<span class="p">}</span>
								<span class="k">return</span><span class="p">;</span>
							<span class="p">}</span><span class="k">else</span> <span class="k">if</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">command</span><span class="o">==</span><span class="nx">_this</span><span class="p">.</span><span class="nx">COMMAND_CODE</span><span class="p">.</span><span class="nx">SYSTEM_RESPONSE</span><span class="p">){</span>
								<span class="kd">var</span> <span class="nx">result</span> <span class="o">=</span> <span class="nx">JSON</span><span class="p">.</span><span class="nx">parse</span><span class="p">(</span><span class="nx">response</span><span class="p">.</span><span class="nx">data</span><span class="p">);</span>
								<span class="nx">receiveNsg</span><span class="p">.</span><span class="nx">innerHTML</span> <span class="o">=</span> <span class="nx">html</span> <span class="o">+</span> <span class="s2">&#34;&lt;br&gt;&#34;</span> <span class="o">+</span> 
									<span class="s2">&#34;[系统提示] &#34;</span><span class="o">+</span><span class="nx">result</span><span class="p">.</span><span class="nx">message</span><span class="p">;</span>
								<span class="c1">// 将ID设置到发送id框上去
</span><span class="c1"></span>								<span class="kd">var</span> <span class="nx">toId</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;toId&#34;</span><span class="p">);</span>
								<span class="nx">toId</span><span class="p">.</span><span class="nx">value</span> <span class="o">=</span> <span class="nx">result</span><span class="p">.</span><span class="nx">fromUserId</span><span class="p">;</span>
								<span class="k">return</span><span class="p">;</span>
							<span class="p">}</span>
						<span class="p">},</span>
						<span class="nx">CHAT</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">onerror</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
							<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;发生错误&#34;</span><span class="p">);</span>
						<span class="p">},</span>
						<span class="nx">CHAT</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">onclose</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
							<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">&#34;客户端与服务端关闭连接成功&#34;</span><span class="p">);</span>
						<span class="p">}</span>		
					<span class="p">}</span><span class="k">else</span><span class="p">{</span>
						<span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;8102年都过了，升级下浏览器吧&#34;</span><span class="p">);</span>
					<span class="p">}</span>
				<span class="p">},</span>
				<span class="nx">chat</span><span class="o">:</span> <span class="kd">function</span><span class="p">(){</span>
					<span class="kd">var</span> <span class="nx">msg</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;messageContent&#34;</span><span class="p">);</span>
					<span class="kd">var</span> <span class="nx">toId</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;toId&#34;</span><span class="p">);</span>
					<span class="kd">var</span> <span class="nx">packet</span> <span class="o">=</span> <span class="p">{</span>
						<span class="nx">version</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span>
						<span class="nx">command</span><span class="o">:</span><span class="nx">_this</span><span class="p">.</span><span class="nx">COMMAND_CODE</span><span class="p">.</span><span class="nx">MESSAGE_REQUEST</span><span class="p">,</span>
						<span class="nx">data</span><span class="o">:</span><span class="p">{</span>
							<span class="nx">fromid</span><span class="o">:</span><span class="nx">_this</span><span class="p">.</span><span class="nx">user</span><span class="p">.</span><span class="nx">id</span><span class="p">,</span>
							<span class="nx">toid</span><span class="o">:</span><span class="nx">toId</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span>
							<span class="nx">message</span><span class="o">:</span><span class="nx">msg</span><span class="p">.</span><span class="nx">value</span>
						<span class="p">}</span>
					<span class="p">}</span>
					<span class="nx">CHAT</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">packet</span><span class="p">));</span>
				<span class="p">},</span>
				<span class="nx">login</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
					<span class="kd">var</span> <span class="nx">userName</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;userName&#34;</span><span class="p">);</span>
					<span class="kd">var</span> <span class="nx">userPassword</span> <span class="o">=</span> <span class="nb">window</span><span class="p">.</span><span class="nb">document</span><span class="p">.</span><span class="nx">getElementById</span><span class="p">(</span><span class="s2">&#34;userPassword&#34;</span><span class="p">);</span>
					<span class="kd">var</span> <span class="nx">packet</span> <span class="o">=</span> <span class="p">{</span>
						<span class="nx">version</span><span class="o">:</span><span class="mi">1</span><span class="p">,</span>
						<span class="nx">command</span><span class="o">:</span><span class="nx">_this</span><span class="p">.</span><span class="nx">COMMAND_CODE</span><span class="p">.</span><span class="nx">LOGIN_REQUEST</span><span class="p">,</span>
						<span class="nx">data</span><span class="o">:</span><span class="p">{</span>
							<span class="nx">userName</span><span class="o">:</span><span class="nx">userName</span><span class="p">.</span><span class="nx">value</span><span class="p">,</span>
							<span class="nx">password</span><span class="o">:</span><span class="nx">userPassword</span><span class="p">.</span><span class="nx">value</span>
						<span class="p">}</span>
					<span class="p">}</span>
					<span class="nx">CHAT</span><span class="p">.</span><span class="nx">socket</span><span class="p">.</span><span class="nx">send</span><span class="p">(</span><span class="nx">JSON</span><span class="p">.</span><span class="nx">stringify</span><span class="p">(</span><span class="nx">packet</span><span class="p">));</span>
				<span class="p">}</span>
			<span class="p">}</span>
			<span class="nx">CHAT</span><span class="p">.</span><span class="nx">init</span><span class="p">();</span>
		<span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
		
	<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>

<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><p>大致效果如下图：</p>
<p><img src="https://img-blog.csdnimg.cn/20200129101717314.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hnaDM4NjMzOTk=,size_16,color_FFFFFF,t_70" alt="用户1登陆"></p>
<p>打开第二个标签页，再次登陆：
<img src="https://img-blog.csdnimg.cn/20200129101739535.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hnaDM4NjMzOTk=,size_16,color_FFFFFF,t_70" alt="用户2小红登陆"></p>
<p>此时会发现，第一个标签页会出现提示：</p>
<p><img src="https://img-blog.csdnimg.cn/20200129101804191.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hnaDM4NjMzOTk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述">
在第一个标签页输入小红ID，以及内容，在第二个标签页显示如下：</p>
<p><img src="https://img-blog.csdnimg.cn/20200129101819230.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hnaDM4NjMzOTk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>小红用户接收到消息,并在发送ID框上填充上小明的ID。此时可以进行回复，小明用户效果图如下：</p>
<p><img src="https://img-blog.csdnimg.cn/20200129101823419.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L2hnaDM4NjMzOTk=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>到此演示完毕，这个demo主要是为了自己记忆练习netty的主要用法。问题很多，大佬轻喷。</p>
<p><a href="https://github.com/carrymaniac/im-demo">github地址</a></p>
]]></content>
		</item>
		
		<item>
			<title>Spring Security</title>
			<link>https://carrymaniac.github.io/posts/spring-security/</link>
			<pubDate>Mon, 27 Apr 2020 17:17:30 +0800</pubDate>
			
			<guid>https://carrymaniac.github.io/posts/spring-security/</guid>
			<description>JWT 流程  客户端使用用户名和密码请求登录 服务端收到请求后会去验证用户名和密码，如果用户名和密码跟数据库记录不一致则验证失败，如果一致则验证通过，服务端会签发一个 Token 返回给客户端 客户端收到请求后会将 Token 缓存起来，比如放在浏览器 Cookie 中或者本地存储中，之后每次请求都会携带该 Token 服务端收到请求后会验证请求中携带的 Token，验证通过则进行业务逻辑处理并成功返回数据  jwt,即JSON WEB TOKEN，它是基于 RFC 7519 标准定义的一种可以安全传输的的JSON对象，由于使用了数字签名，所以是可信任和安全的。
格式 在 JWT 中，Token 有三部分组成，中间用 . 隔开，并使用 Base64 编码：
 header.payload.signature
 其中：
 header用于存放  Token 的类型 Token 所使用的加密算法    { &amp;#34;typ&amp;#34;: &amp;#34;JWT&amp;#34;, &amp;#34;alg&amp;#34;: &amp;#34;HS256&amp;#34; } 该例说明 Token 类型是 JWT，加密算法是 HS256（alg 算法可以有多种）。
  payload
Payload 中携带 Token 的具体内容，里面有一些标准的字段，当然你也可以添加额外的字段，来表达更丰富的信息，可以用这些信息来做更丰富的处理，比如记录请求用户名，标准字段有：
 iss：JWT Token 的签发者 sub：主题 exp：JWT Token 过期时间 aud：接收 JWT Token 的一方 iat：JWT Token 签发时间 nbf：JWT Token 生效时间 jti：JWT Token ID    { &amp;#34;id&amp;#34;: 2, &amp;#34;username&amp;#34;: &amp;#34;kong&amp;#34;, &amp;#34;nbf&amp;#34;: 1527931805, &amp;#34;iat&amp;#34;: 1527931805 } {&amp;#34;sub&amp;#34;:&amp;#34;admin&amp;#34;, &amp;#34;iat&amp;#34;:1489079981393, &amp;#34;exp&amp;#34;:1489684781}   signature</description>
			<content type="html"><![CDATA[<h2 id="jwt">JWT</h2>
<h3 id="流程">流程</h3>
<ol>
<li>客户端使用用户名和密码请求登录</li>
<li>服务端收到请求后会去验证用户名和密码，如果用户名和密码跟数据库记录不一致则验证失败，如果一致则验证通过，服务端会签发一个 Token 返回给客户端</li>
<li>客户端收到请求后会将 Token 缓存起来，比如放在浏览器 Cookie 中或者本地存储中，之后每次请求都会携带该 Token</li>
<li>服务端收到请求后会验证请求中携带的 Token，验证通过则进行业务逻辑处理并成功返回数据</li>
</ol>
<p>jwt,即JSON WEB TOKEN，它是基于 RFC 7519 标准定义的一种可以安全传输的的JSON对象，由于使用了数字签名，所以是可信任和安全的。</p>
<h3 id="格式">格式</h3>
<p>在 JWT 中，Token 有三部分组成，中间用 . 隔开，并使用 Base64 编码：</p>
<blockquote>
<p>header.payload.signature</p>
</blockquote>
<p>其中：</p>
<ul>
<li>header用于存放
<ol>
<li>Token 的类型</li>
<li>Token 所使用的加密算法</li>
</ol>
</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
  <span class="nt">&#34;typ&#34;</span><span class="p">:</span> <span class="s2">&#34;JWT&#34;</span><span class="p">,</span>
  <span class="nt">&#34;alg&#34;</span><span class="p">:</span> <span class="s2">&#34;HS256&#34;</span>
<span class="p">}</span>
</code></pre></div><p>该例说明 Token 类型是 JWT，加密算法是 HS256（alg 算法可以有多种）。</p>
<ul>
<li>
<p>payload</p>
<p>Payload 中携带 Token 的具体内容，里面有一些标准的字段，当然你也可以添加额外的字段，来表达更丰富的信息，可以用这些信息来做更丰富的处理，比如记录请求用户名，标准字段有：</p>
<ul>
<li>iss：JWT Token 的签发者</li>
<li>sub：主题</li>
<li>exp：JWT Token 过期时间</li>
<li>aud：接收 JWT Token 的一方</li>
<li>iat：JWT Token 签发时间</li>
<li>nbf：JWT Token 生效时间</li>
<li>jti：JWT Token ID</li>
</ul>
</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json"><span class="p">{</span>
 <span class="nt">&#34;id&#34;</span><span class="p">:</span> <span class="mi">2</span><span class="p">,</span>
 <span class="nt">&#34;username&#34;</span><span class="p">:</span> <span class="s2">&#34;kong&#34;</span><span class="p">,</span>
 <span class="nt">&#34;nbf&#34;</span><span class="p">:</span> <span class="mi">1527931805</span><span class="p">,</span>
 <span class="nt">&#34;iat&#34;</span><span class="p">:</span> <span class="mi">1527931805</span>
<span class="p">}</span>
<span class="p">{</span><span class="nt">&#34;sub&#34;</span><span class="p">:</span><span class="s2">&#34;admin&#34;</span><span class="p">,</span>
 <span class="nt">&#34;iat&#34;</span><span class="p">:</span><span class="mi">1489079981393</span><span class="p">,</span>
 <span class="nt">&#34;exp&#34;</span><span class="p">:</span><span class="mi">1489684781</span><span class="p">}</span>
</code></pre></div><ul>
<li>
<p>signature</p>
<p>Signature 是 Token 的签名部分，通过如下方式生成：</p>
<ol>
<li>用 Base64 对 header.payload 进行编码</li>
<li>用 Secret 对编码后的内容进行加密，加密后的内容即为 Signature</li>
</ol>
<p>是以header和payload生成的签名，一旦header和payload被篡改，验证将失败</p>
<p>Secret 相当于一个密码，存储在服务端，一般通过配置文件来配置 Secret 的值</p>
</li>
</ul>
<p>最后生成的token大概长得像这样</p>
<pre><code>eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpYXQiOjE1MjgwMTY5MjIsImlkIjowLCJuYmYiOjE1MjgwMTY5MjIsInVzZXJuYW1lIjoiYWRtaW4ifQ.LjxrK9DuAwAzUD8-9v43NzWBN7HXsSLfebw92DKd1JQ
</code></pre><p>签名后服务端会返回生成的 Token，客户端下次请求会携带该 Token，服务端收到 Token 后会解析出 header.payload，然后用相同的加密算法和密码对 header.payload 再进行一次加密，并对比加密后的 Token 和收到的 Token 是否相同，如果相同则验证通过，不相同则返回 HTTP 401 Unauthorized 的错误。</p>
<h3 id="如何进行验证">如何进行验证</h3>
<p>API 身份认证包括两步：</p>
<ol>
<li>登录成功时签发 token</li>
<li>API 添加认证中间件（拦截器）</li>
</ol>
<h2 id="springsecurity">SpringSecurity</h2>
<p>在我看来，学习SpringSecurity有两个词需要先认清：</p>
<p>认证(Authentication):是建立一个他声明的主体的过程,告知浏览器</p>
<p>授权(Authorization)即确认一个主体是否允许执行某个动作的权限</p>
<p>认证就是我们翻译过来就是 “你是谁”，我们可以理解为登录，而授权则是登陆过后明白自己有哪些事情可以做，我们可以理解为 ”你可以做什么“，而在springsecurity将这两者完全分开，并且提供了不同的策略去定义它们。</p>
<p><code>authentication</code>和<code>authorization</code></p>
<p>authentication指认证，即确认你的身份这件事情，换到应用上来说，即解决你是否登录，是否为有效用户的事情</p>
<p>而authorization指的是授权，即确认你是否有这个权限的事情，在应用的层面上说，即解决你是否有这个权限。</p>
<p>从代码开始看吧:</p>
<h2 id="代码实践">代码实践</h2>
<h3 id="user实体类">User实体类</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.gdou.security.entity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.Data</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.core.GrantedAuthority</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetails</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.ArrayList</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Collection</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.List</span><span class="o">;</span>

<span class="cm">/**
</span><span class="cm"> * @ProjectName: security
</span><span class="cm"> * @Package: com.gdou.security.entity
</span><span class="cm"> * @ClassName: User
</span><span class="cm"> * @Author: carrymaniac
</span><span class="cm"> * @Description: user 实体类 需要继承UserDetails，并实现getAuthorities()方法，该方法为返回用户的&#34;权限&#34;
</span><span class="cm"> * @Date: 2020/2/11 2:26 下午
</span><span class="cm"> * @Version:
</span><span class="cm"> */</span>
<span class="nd">@Data</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">User</span> <span class="kd">implements</span> <span class="n">UserDetails</span> <span class="o">{</span>

    <span class="kd">private</span> <span class="kt">int</span> <span class="n">id</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">password</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">salt</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">email</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">type</span><span class="o">;</span>
    <span class="kd">private</span> <span class="kt">int</span> <span class="n">status</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">activationCode</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">headerUrl</span><span class="o">;</span>
    <span class="kd">private</span> <span class="n">Date</span> <span class="n">createTime</span><span class="o">;</span>

    <span class="cm">/**
</span><span class="cm">     * 获取权限 可用对type进行判断返回权限 此处处理为根据Type类型返回权限
</span><span class="cm">     * @return
</span><span class="cm">     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">Collection</span><span class="o">&lt;?</span> <span class="kd">extends</span> <span class="n">GrantedAuthority</span><span class="o">&gt;</span> <span class="nf">getAuthorities</span><span class="o">()</span> <span class="o">{</span>
        <span class="n">List</span><span class="o">&lt;</span><span class="n">GrantedAuthority</span><span class="o">&gt;</span> <span class="n">list</span> <span class="o">=</span> <span class="k">new</span> <span class="n">ArrayList</span><span class="o">&lt;&gt;();</span>
        <span class="n">list</span><span class="o">.</span><span class="na">add</span><span class="o">(()-&gt;{</span>
            <span class="k">switch</span> <span class="o">(</span><span class="n">type</span><span class="o">){</span>
                <span class="k">case</span> <span class="n">1</span><span class="o">:</span>
                    <span class="k">return</span> <span class="s">&#34;ADMIN&#34;</span><span class="o">;</span>
                <span class="k">default</span><span class="o">:</span>
                    <span class="k">return</span> <span class="s">&#34;USER&#34;</span><span class="o">;</span>
            <span class="o">}</span>
        <span class="o">});</span>
        <span class="k">return</span> <span class="n">list</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 获取密码
</span><span class="cm">     * @return
</span><span class="cm">     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getPassword</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">password</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 获取用户名
</span><span class="cm">     * @return
</span><span class="cm">     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUsername</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">username</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 账号是否过期
</span><span class="cm">     * @return
</span><span class="cm">     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAccountNonExpired</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 账号是否锁定
</span><span class="cm">     * @return
</span><span class="cm">     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isAccountNonLocked</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 凭证是否过期
</span><span class="cm">     * @return
</span><span class="cm">     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isCredentialsNonExpired</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 账号是否可用
</span><span class="cm">     * @return
</span><span class="cm">     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">isEnabled</span><span class="o">()</span> <span class="o">{</span>
        <span class="k">return</span> <span class="kc">true</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div><h3 id="userservice">UserService</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Service</span>
<span class="c1">//UserService实现了UserDetailsService接口，里面只有一个方法loadUserByUsername
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserService</span> <span class="kd">implements</span> <span class="n">UserDetailsService</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="n">UserDao</span> <span class="n">userDao</span><span class="o">;</span>

    <span class="kd">public</span> <span class="n">User</span> <span class="nf">findUserByName</span><span class="o">(</span><span class="n">String</span> <span class="n">username</span><span class="o">)</span> <span class="o">{</span>
        <span class="k">return</span> <span class="n">userDao</span><span class="o">.</span><span class="na">selectByName</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
    <span class="o">}</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="n">UserDetails</span> <span class="nf">loadUserByUsername</span><span class="o">(</span><span class="n">String</span> <span class="n">s</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">UsernameNotFoundException</span> <span class="o">{</span>
        <span class="k">return</span> <span class="k">this</span><span class="o">.</span><span class="na">findUserByName</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><h3 id="配置">配置</h3>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span>
  <span class="c1">//SecurityConfig继承自WebSecurityConfigurerAdapter 注意 需要加上@Configuration注解 否则配置将不会生效
</span></code></pre></div><div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.gdou.security.config</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.gdou.security.JwtAuthenticationTokenFilter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.security.VO.ResultVOUtil</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.security.entity.User</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.security.service.UserService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.security.util.Demoutil</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.context.annotation.Configuration</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.http.HttpMethod</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.authentication.AuthenticationProvider</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.authentication.BadCredentialsException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.authentication.UsernamePasswordAuthenticationToken</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.authentication.builders.AuthenticationManagerBuilder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.builders.HttpSecurity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.builders.WebSecurity</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.config.http.SessionCreationPolicy</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.core.Authentication</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.core.AuthenticationException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UsernameNotFoundException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.crypto.password.Pbkdf2PasswordEncoder</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.web.AuthenticationEntryPoint</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.web.authentication.AuthenticationEntryPointFailureHandler</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.web.authentication.AuthenticationFailureHandler</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.web.authentication.AuthenticationSuccessHandler</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.web.authentication.logout.LogoutSuccessHandler</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">javax.servlet.*</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletRequest</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">javax.servlet.http.HttpServletResponse</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.io.IOException</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Objects</span><span class="o">;</span>

<span class="cm">/**
</span><span class="cm"> * @ProjectName: security
</span><span class="cm"> * @Package: com.gdou.security.config
</span><span class="cm"> * @ClassName: SecurityConfig
</span><span class="cm"> * @Author: carrymaniac
</span><span class="cm"> * @Description:
</span><span class="cm"> * @Date: 2020/2/11 3:54 下午
</span><span class="cm"> * @Version:
</span><span class="cm"> */</span>
<span class="nd">@Configuration</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">SecurityConfig</span> <span class="kd">extends</span> <span class="n">WebSecurityConfigurerAdapter</span> <span class="o">{</span>
    <span class="nd">@Autowired</span>
    <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
    <span class="nd">@Autowired</span>
    <span class="n">JwtAuthenticationTokenFilter</span> <span class="n">filter</span><span class="o">;</span>
    <span class="cm">/**
</span><span class="cm">     * 配置权限用
</span><span class="cm">     * @param auth
</span><span class="cm">     * @throws Exception
</span><span class="cm">     */</span>

    <span class="c1">//AuthenticationManager：认证的核心接口
</span><span class="c1"></span>    <span class="c1">//AuthenticationManagerBuilder：用于构建AuthenticationManager的工具
</span><span class="c1"></span>    <span class="c1">//ProviderManger：AuthenticationManager的默认实现
</span><span class="c1"></span>    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">AuthenticationManagerBuilder</span> <span class="n">auth</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>

<span class="c1">//        //1.内置的认证过程
</span><span class="c1">//        //简单的内置认证过程，auth会使用我们提供的userDetailsService
</span><span class="c1">//        //以及使用密码Encoder进行解密
</span><span class="c1">//        auth.userDetailsService(userService)
</span><span class="c1">//            .passwordEncoder(new Pbkdf2PasswordEncoder(&#34;12345&#34;));
</span><span class="c1">//
</span><span class="c1">//        //2.自定义认证规则
</span><span class="c1">//        // AuthenticationProvider: ProviderManager持有一组AuthenticationProvider,
</span><span class="c1">//        // 每个AuthenticationProvider负责一种认证.
</span><span class="c1">//        // 委托模式: ProviderManager将认证委托给AuthenticationProvider.
</span><span class="c1">//        auth.authenticationProvider(new AuthenticationProvider() {
</span><span class="c1">//            //定义认证过程
</span><span class="c1">//            @Override
</span><span class="c1">//            //Authentication用于封装认证信息的接口,不同的实现类代表不同的类型的认证信息（例如有账号密码认证，QQ认证，微信认证）
</span><span class="c1">//            public Authentication authenticate(Authentication authentication) throws AuthenticationException {
</span><span class="c1">//                String username = authentication.getName();
</span><span class="c1">//                String password = (String) authentication.getCredentials();
</span><span class="c1">//
</span><span class="c1">//                User user = userService.findUserByName(username);
</span><span class="c1">//                //正常逻辑拿到这些信息，会进行校验，比如说这个账号是否过期等等
</span><span class="c1">//                if(user==null){
</span><span class="c1">//                    //之后会有专门的Handler捕获这些Exception
</span><span class="c1">//                    throw new UsernameNotFoundException(&#34;账号不存在!&#34;);
</span><span class="c1">//                }
</span><span class="c1">//                password = Demoutil.md5(password + user.getSalt());
</span><span class="c1">//                if(!Objects.equals(password, user.getPassword())){
</span><span class="c1">//                    throw new BadCredentialsException(&#34;密码不正确!&#34;);
</span><span class="c1">//                }
</span><span class="c1">//                //返回接口实例
</span><span class="c1">//                return new UsernamePasswordAuthenticationToken(user,user.getPassword(),user.getAuthorities());
</span><span class="c1">//            }
</span><span class="c1">//
</span><span class="c1">//            //定义当前的AuthenticationProvider支持什么类型
</span><span class="c1">//            @Override
</span><span class="c1">//            public boolean supports(Class&lt;?&gt; aClass) {
</span><span class="c1">//                // UsernamePasswordAuthenticationToken: Authentication接口的常用的实现类.
</span><span class="c1">//                return UsernamePasswordAuthenticationToken.class.equals(aClass);
</span><span class="c1">//            }
</span><span class="c1">//        });
</span><span class="c1"></span>
        <span class="c1">//3.不使用SpringSecurity提供的认证方式而只使用它的认证逻辑，可以自己编写一套登录的逻辑
</span><span class="c1"></span>        <span class="c1">//然后使用一套Interceptor拦截器(比如在JWT中写Token用的Interceptor上,当确定用户有效的时候）
</span><span class="c1"></span>        <span class="c1">//手动的将Authentication写入到SecurityContextHolder中去，这样下面Security才能使用到Authentication
</span><span class="c1"></span>        <span class="c1">//具体查看JwtAuthenticationTokenFilter
</span><span class="c1"></span>    <span class="o">}</span>


    <span class="cm">/**
</span><span class="cm">     * 配置对请求的拦截的
</span><span class="cm">     * @param web
</span><span class="cm">     * @throws Exception
</span><span class="cm">     */</span>
    <span class="nd">@Override</span>
    <span class="kd">public</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">WebSecurity</span> <span class="n">web</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
        <span class="c1">//不拦截静态资源
</span><span class="c1"></span>        <span class="n">web</span><span class="o">.</span><span class="na">ignoring</span><span class="o">().</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/resources/**&#34;</span><span class="o">);</span>
    <span class="o">}</span>


    <span class="c1">//配置拦截的方式
</span><span class="c1"></span>    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">configure</span><span class="o">(</span><span class="n">HttpSecurity</span> <span class="n">http</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">Exception</span> <span class="o">{</span>
<span class="c1">//        //对认证进行配置
</span><span class="c1">//        http.formLogin()
</span><span class="c1">////                .loginPage(&#34;/loginpage&#34;)
</span><span class="c1">//                .loginProcessingUrl(&#34;login&#34;)
</span><span class="c1">////                .successForwardUrl()
</span><span class="c1">////                .failureForwardUrl()
</span><span class="c1">//                .successHandler((request, response, authentication) -&gt; {
</span><span class="c1">//                    //这里进行登录成功之后的处理
</span><span class="c1">//                    response.setCharacterEncoding(&#34;UTF-8&#34;);
</span><span class="c1">//                    response.setContentType(&#34;application/json&#34;);
</span><span class="c1">//                    response.getWriter().println(&#34;{msg:登录成功,code:0}&#34;);
</span><span class="c1">//                    response.getWriter().flush();
</span><span class="c1">//                })
</span><span class="c1">//                .failureHandler((request, response, e) -&gt; {
</span><span class="c1">//                    //这里的e是之前跑出来的异常
</span><span class="c1">//                    response.setCharacterEncoding(&#34;UTF-8&#34;);
</span><span class="c1">//                    response.setContentType(&#34;application/json&#34;);
</span><span class="c1">//                    response.getWriter().println(&#34;{msg:登录失败,code:1}&#34;);
</span><span class="c1">//                    response.getWriter().flush();
</span><span class="c1">//                });
</span><span class="c1">//        http.logout()
</span><span class="c1">//                .logoutUrl(&#34;/logout&#34;)
</span><span class="c1">//                .logoutSuccessHandler((request, response, authentication) -&gt; {
</span><span class="c1">//                    //删除信息
</span><span class="c1">//                    response.setCharacterEncoding(&#34;UTF-8&#34;);
</span><span class="c1">//                    response.setContentType(&#34;application/json&#34;);
</span><span class="c1">//                    response.getWriter().println(&#34;{msg:登出成功,code:0}&#34;);
</span><span class="c1">//                    response.getWriter().flush();
</span><span class="c1">//                });
</span><span class="c1"></span>

        <span class="c1">//配置拦截
</span><span class="c1"></span>
            <span class="n">http</span><span class="o">.</span><span class="na">csrf</span><span class="o">()</span><span class="c1">// 由于使用的是JWT，我们这里不需要csrf
</span><span class="c1"></span>                <span class="o">.</span><span class="na">disable</span><span class="o">()</span>
                <span class="o">.</span><span class="na">sessionManagement</span><span class="o">()</span><span class="c1">// 基于token，所以不需要session
</span><span class="c1"></span>                <span class="o">.</span><span class="na">sessionCreationPolicy</span><span class="o">(</span><span class="n">SessionCreationPolicy</span><span class="o">.</span><span class="na">STATELESS</span><span class="o">)</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                <span class="o">.</span><span class="na">authorizeRequests</span><span class="o">()</span>
                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="n">HttpMethod</span><span class="o">.</span><span class="na">GET</span><span class="o">,</span> <span class="c1">// 允许对于网站静态资源的无授权访问
</span><span class="c1"></span>                        <span class="s">&#34;/&#34;</span><span class="o">,</span>
                        <span class="s">&#34;/*.html&#34;</span><span class="o">,</span>
                        <span class="s">&#34;/favicon.ico&#34;</span><span class="o">,</span>
                        <span class="s">&#34;/**/*.html&#34;</span><span class="o">,</span>
                        <span class="s">&#34;/**/*.css&#34;</span><span class="o">,</span>
                        <span class="s">&#34;/**/*.js&#34;</span><span class="o">,</span>
                        <span class="s">&#34;/swagger-resources/**&#34;</span><span class="o">,</span>
                        <span class="s">&#34;/v2/api-docs/**&#34;</span>
                <span class="o">)</span>
                <span class="o">.</span><span class="na">permitAll</span><span class="o">()</span>
                <span class="o">.</span><span class="na">antMatchers</span><span class="o">(</span><span class="s">&#34;/user/login&#34;</span><span class="o">).</span><span class="na">permitAll</span><span class="o">()</span>
<span class="c1">//                .antMatchers(&#34;/letter&#34;).hasAnyAuthority(&#34;USER&#34;, &#34;ADMIN&#34;)
</span><span class="c1">//                .antMatchers(&#34;/admin&#34;).hasAnyAuthority(&#34;ADMIN&#34;)
</span><span class="c1"></span>                <span class="o">.</span><span class="na">anyRequest</span><span class="o">().</span><span class="na">authenticated</span><span class="o">()</span>
                <span class="o">.</span><span class="na">and</span><span class="o">()</span>
                <span class="o">.</span><span class="na">exceptionHandling</span><span class="o">()</span>
                <span class="o">.</span><span class="na">accessDeniedHandler</span><span class="o">((</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">e</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
                    <span class="c1">//做对AccessDeniedException的处理
</span><span class="c1"></span>                    <span class="c1">//即授权问题的情况
</span><span class="c1"></span>                    <span class="n">response</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">&#34;UTF-8&#34;</span><span class="o">);</span>
                    <span class="n">response</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">&#34;application/json&#34;</span><span class="o">);</span>
                    <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="n">ResultVOUtil</span><span class="o">.</span><span class="na">fail</span><span class="o">(</span><span class="n">100</span><span class="o">,</span><span class="s">&#34;你没有权限&#34;</span><span class="o">));</span>
                    <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">flush</span><span class="o">();</span>
                <span class="o">})</span>
                <span class="o">.</span><span class="na">authenticationEntryPoint</span><span class="o">((</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">,</span> <span class="n">e</span><span class="o">)</span> <span class="o">-&gt;</span> <span class="o">{</span>
                    <span class="n">response</span><span class="o">.</span><span class="na">setCharacterEncoding</span><span class="o">(</span><span class="s">&#34;UTF-8&#34;</span><span class="o">);</span>
                    <span class="n">response</span><span class="o">.</span><span class="na">setContentType</span><span class="o">(</span><span class="s">&#34;application/json&#34;</span><span class="o">);</span>
                    <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">println</span><span class="o">(</span><span class="n">ResultVOUtil</span><span class="o">.</span><span class="na">fail</span><span class="o">(</span><span class="n">100</span><span class="o">,</span> <span class="s">&#34;你未登陆&#34;</span><span class="o">));</span>
                    <span class="n">response</span><span class="o">.</span><span class="na">getWriter</span><span class="o">().</span><span class="na">flush</span><span class="o">();</span>
                    <span class="c1">//处理没有登陆的情况
</span><span class="c1"></span>                <span class="o">});</span>
        <span class="n">http</span><span class="o">.</span><span class="na">addFilterBefore</span><span class="o">(</span><span class="n">filter</span><span class="o">,</span> <span class="n">UsernamePasswordAuthenticationFilter</span><span class="o">.</span><span class="na">class</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div><p>因为我们采用第三种认证方式，不使用不使用SpringSecurity提供的认证逻辑而只使用它的授权逻辑，因此我们要手动地将我们的身份认证注入到系统，以便于后面SpringSecurity使用该认证信息进行授权鉴定，其中的<code>JwtAuthenticationTokenFilter</code>,主要功能是在每次请求的时候，通过Request的tokenHeader拿到token，解析出用户信息，并将其转换为SpringSecurity的authentication，注入到系统中。</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="nd">@Slf4j</span>
<span class="nd">@Component</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtAuthenticationTokenFilter</span> <span class="kd">extends</span> <span class="n">OncePerRequestFilter</span> <span class="o">{</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jwt.tokenHeader}&#34;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">tokenHeader</span><span class="o">;</span>

    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jwt.tokenHead}&#34;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">tokenHead</span><span class="o">;</span>

    <span class="nd">@Autowired</span>
    <span class="kd">private</span> <span class="n">JwtTokenUtil</span> <span class="n">jwtTokenUtil</span><span class="o">;</span>
    <span class="nd">@Autowired</span>
    <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
    <span class="nd">@Autowired</span>
    <span class="n">HostHolder</span> <span class="n">hostHolder</span><span class="o">;</span>

    <span class="nd">@Override</span>
    <span class="kd">protected</span> <span class="kt">void</span> <span class="nf">doFilterInternal</span><span class="o">(</span><span class="n">HttpServletRequest</span> <span class="n">request</span><span class="o">,</span> <span class="n">HttpServletResponse</span> <span class="n">response</span><span class="o">,</span> <span class="n">FilterChain</span> <span class="n">filterChain</span><span class="o">)</span> <span class="kd">throws</span> <span class="n">ServletException</span><span class="o">,</span> <span class="n">IOException</span> <span class="o">{</span>
        <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;{}&#34;</span><span class="o">,</span><span class="k">this</span><span class="o">.</span><span class="na">tokenHeader</span><span class="o">);</span>
        <span class="n">String</span> <span class="n">authHeader</span> <span class="o">=</span> <span class="n">request</span><span class="o">.</span><span class="na">getHeader</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">tokenHeader</span><span class="o">);</span>
        <span class="c1">//拿到Token
</span><span class="c1"></span>        <span class="k">if</span> <span class="o">(</span><span class="n">authHeader</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">authHeader</span><span class="o">.</span><span class="na">startsWith</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">tokenHead</span><span class="o">))</span> <span class="o">{</span>
            <span class="n">String</span> <span class="n">token</span> <span class="o">=</span> <span class="n">authHeader</span><span class="o">.</span><span class="na">substring</span><span class="o">(</span><span class="k">this</span><span class="o">.</span><span class="na">tokenHead</span><span class="o">.</span><span class="na">length</span><span class="o">());</span>
            <span class="n">String</span> <span class="n">userName</span> <span class="o">=</span> <span class="n">jwtTokenUtil</span><span class="o">.</span><span class="na">getUserNameFromToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
            <span class="k">if</span> <span class="o">(</span><span class="n">userName</span> <span class="o">!=</span> <span class="kc">null</span> <span class="o">&amp;&amp;</span> <span class="n">SecurityContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">().</span><span class="na">getAuthentication</span><span class="o">()</span> <span class="o">==</span> <span class="kc">null</span><span class="o">)</span> <span class="o">{</span>
                <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">findUserByName</span><span class="o">(</span><span class="n">userName</span><span class="o">);</span>
                <span class="k">if</span> <span class="o">(</span><span class="n">jwtTokenUtil</span><span class="o">.</span><span class="na">validateToken</span><span class="o">(</span><span class="n">token</span><span class="o">,</span> <span class="n">user</span><span class="o">))</span> <span class="o">{</span>
                    <span class="c1">//将Authentication写到Context里去
</span><span class="c1"></span>                    <span class="n">UsernamePasswordAuthenticationToken</span> <span class="n">authentication</span> <span class="o">=</span> <span class="k">new</span> <span class="n">UsernamePasswordAuthenticationToken</span><span class="o">(</span><span class="n">user</span><span class="o">,</span> <span class="kc">null</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getAuthorities</span><span class="o">());</span>
                    <span class="n">authentication</span><span class="o">.</span><span class="na">setDetails</span><span class="o">(</span><span class="k">new</span> <span class="n">WebAuthenticationDetailsSource</span><span class="o">().</span><span class="na">buildDetails</span><span class="o">(</span><span class="n">request</span><span class="o">));</span>
                    <span class="n">SecurityContextHolder</span><span class="o">.</span><span class="na">getContext</span><span class="o">().</span><span class="na">setAuthentication</span><span class="o">(</span><span class="n">authentication</span><span class="o">);</span>
                    <span class="n">hostHolder</span><span class="o">.</span><span class="na">setUser</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="n">filterChain</span><span class="o">.</span><span class="na">doFilter</span><span class="o">(</span><span class="n">request</span><span class="o">,</span> <span class="n">response</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>其中的JWTUtil：</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.gdou.security.util</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">io.jsonwebtoken.Claims</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.jsonwebtoken.Jwts</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">io.jsonwebtoken.SignatureAlgorithm</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.extern.java.Log</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">lombok.extern.slf4j.Slf4j</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Value</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.security.core.userdetails.UserDetails</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.stereotype.Component</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.util.Date</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.HashMap</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Map</span><span class="o">;</span>

<span class="cm">/**
</span><span class="cm"> * @ProjectName: security
</span><span class="cm"> * @Package: com.gdou.security.util
</span><span class="cm"> * @ClassName: JwtTokenUtil
</span><span class="cm"> * @Author: carrymaniac
</span><span class="cm"> * @Description: jwt token生成用的工具类
</span><span class="cm"> * @Date: 2020/4/25 11:29 上午
</span><span class="cm"> * @Version:
</span><span class="cm"> */</span>
<span class="nd">@Component</span>
<span class="nd">@Slf4j</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">JwtTokenUtil</span> <span class="o">{</span>

    <span class="c1">//secret 用于加密
</span><span class="c1"></span>    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jwt.secret}&#34;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="n">secret</span><span class="o">;</span>

    <span class="c1">//过期时间
</span><span class="c1"></span>    <span class="nd">@Value</span><span class="o">(</span><span class="s">&#34;${jwt.expiration}&#34;</span><span class="o">)</span>
    <span class="kd">private</span> <span class="n">Long</span> <span class="n">expiration</span><span class="o">;</span>

    <span class="n">String</span> <span class="n">CLAIM_KEY_USERNAME</span> <span class="o">=</span> <span class="s">&#34;sub&#34;</span><span class="o">;</span>
    <span class="n">String</span> <span class="n">CLAIM_KEY_CREATED</span> <span class="o">=</span> <span class="s">&#34;created&#34;</span><span class="o">;</span>

    <span class="cm">/**
</span><span class="cm">     * 生成Token
</span><span class="cm">     * @param claims
</span><span class="cm">     * @return
</span><span class="cm">     */</span>
    <span class="kd">private</span> <span class="n">String</span> <span class="nf">generateToken</span><span class="o">(</span><span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">claims</span><span class="o">){</span>
        <span class="k">return</span> <span class="n">Jwts</span><span class="o">.</span><span class="na">builder</span><span class="o">()</span>
                <span class="c1">//负载
</span><span class="c1"></span>                <span class="o">.</span><span class="na">setClaims</span><span class="o">(</span><span class="n">claims</span><span class="o">)</span>
                <span class="o">.</span><span class="na">setExpiration</span><span class="o">(</span><span class="n">generateExpirationDate</span><span class="o">())</span>
                <span class="o">.</span><span class="na">signWith</span><span class="o">(</span><span class="n">SignatureAlgorithm</span><span class="o">.</span><span class="na">HS512</span><span class="o">,</span><span class="n">secret</span><span class="o">)</span>
                <span class="o">.</span><span class="na">compact</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Claims</span> <span class="nf">getClaimsFromToken</span><span class="o">(</span><span class="n">String</span> <span class="n">token</span><span class="o">){</span>
        <span class="n">Claims</span> <span class="n">claims</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="k">try</span><span class="o">{</span>
            <span class="n">claims</span> <span class="o">=</span> <span class="n">Jwts</span><span class="o">.</span><span class="na">parser</span><span class="o">()</span>
                    <span class="o">.</span><span class="na">setSigningKey</span><span class="o">(</span><span class="n">secret</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">parseClaimsJws</span><span class="o">(</span><span class="n">token</span><span class="o">)</span>
                    <span class="o">.</span><span class="na">getBody</span><span class="o">();</span>
        <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
            <span class="n">log</span><span class="o">.</span><span class="na">info</span><span class="o">(</span><span class="s">&#34;JWT格式校验失败:{} &#34;</span><span class="o">,</span><span class="n">token</span><span class="o">);</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">claims</span><span class="o">;</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">getUserNameFromToken</span><span class="o">(</span><span class="n">String</span> <span class="n">token</span><span class="o">){</span>
        <span class="n">String</span> <span class="n">username</span><span class="o">;</span>
        <span class="k">try</span><span class="o">{</span>
            <span class="n">Claims</span> <span class="n">claims</span> <span class="o">=</span> <span class="n">getClaimsFromToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
            <span class="n">username</span> <span class="o">=</span> <span class="n">claims</span><span class="o">.</span><span class="na">getSubject</span><span class="o">();</span>
        <span class="o">}</span><span class="k">catch</span> <span class="o">(</span><span class="n">Exception</span> <span class="n">e</span><span class="o">){</span>
            <span class="n">username</span> <span class="o">=</span> <span class="kc">null</span><span class="o">;</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">username</span><span class="o">;</span>
    <span class="o">}</span>


    <span class="kd">public</span> <span class="kt">boolean</span> <span class="nf">validateToken</span><span class="o">(</span><span class="n">String</span> <span class="n">token</span><span class="o">,</span> <span class="n">UserDetails</span> <span class="n">userDetails</span><span class="o">){</span>
        <span class="n">String</span> <span class="n">userName</span> <span class="o">=</span> <span class="n">getUserNameFromToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">userName</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">userDetails</span><span class="o">.</span><span class="na">getUsername</span><span class="o">())</span> <span class="o">&amp;&amp;</span> <span class="o">!</span><span class="n">isTokenExpired</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="kt">boolean</span> <span class="nf">isTokenExpired</span><span class="o">(</span><span class="n">String</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Date</span> <span class="n">date</span> <span class="o">=</span> <span class="n">getExpiredDateFromToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">date</span><span class="o">.</span><span class="na">before</span><span class="o">(</span><span class="k">new</span> <span class="n">Date</span><span class="o">());</span>
    <span class="o">}</span>

    <span class="kd">private</span> <span class="n">Date</span> <span class="nf">getExpiredDateFromToken</span><span class="o">(</span><span class="n">String</span> <span class="n">token</span><span class="o">)</span> <span class="o">{</span>
        <span class="n">Claims</span> <span class="n">claims</span> <span class="o">=</span> <span class="n">getClaimsFromToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
        <span class="k">return</span> <span class="n">claims</span><span class="o">.</span><span class="na">getExpiration</span><span class="o">();</span>
    <span class="o">}</span>

    <span class="kd">public</span> <span class="n">String</span> <span class="nf">generateToken</span><span class="o">(</span><span class="n">UserDetails</span> <span class="n">userDetails</span><span class="o">){</span>
        <span class="n">Map</span><span class="o">&lt;</span><span class="n">String</span><span class="o">,</span><span class="n">Object</span><span class="o">&gt;</span> <span class="n">claims</span> <span class="o">=</span> <span class="k">new</span> <span class="n">HashMap</span><span class="o">&lt;&gt;();</span>
        <span class="n">claims</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">CLAIM_KEY_USERNAME</span><span class="o">,</span><span class="n">userDetails</span><span class="o">.</span><span class="na">getUsername</span><span class="o">());</span>
        <span class="n">claims</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">CLAIM_KEY_CREATED</span><span class="o">,</span><span class="k">new</span> <span class="n">Date</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">generateToken</span><span class="o">(</span><span class="n">claims</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 刷新token
</span><span class="cm">     * 重新
</span><span class="cm">     * @param token
</span><span class="cm">     * @return
</span><span class="cm">     */</span>
    <span class="kd">public</span> <span class="n">String</span> <span class="nf">refreshToken</span><span class="o">(</span><span class="n">String</span> <span class="n">token</span><span class="o">){</span>
        <span class="n">Claims</span> <span class="n">claims</span> <span class="o">=</span> <span class="n">getClaimsFromToken</span><span class="o">(</span><span class="n">token</span><span class="o">);</span>
        <span class="n">claims</span><span class="o">.</span><span class="na">put</span><span class="o">(</span><span class="n">CLAIM_KEY_CREATED</span><span class="o">,</span><span class="k">new</span> <span class="n">Date</span><span class="o">());</span>
        <span class="k">return</span> <span class="n">generateToken</span><span class="o">(</span><span class="n">claims</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="cm">/**
</span><span class="cm">     * 生成Token的过期时间
</span><span class="cm">     * @return 过期时间
</span><span class="cm">     */</span>
    <span class="kd">private</span> <span class="n">Date</span> <span class="nf">generateExpirationDate</span><span class="o">(){</span>
        <span class="k">return</span> <span class="k">new</span> <span class="n">Date</span><span class="o">(</span><span class="n">System</span><span class="o">.</span><span class="na">currentTimeMillis</span><span class="o">()+</span><span class="n">expiration</span><span class="o">*</span><span class="n">1000</span><span class="o">);</span>
    <span class="o">}</span>

<span class="o">}</span>
</code></pre></div><h3 id="controller">controller</h3>
<p>因为我采用了第三种的方式，因此我们要自己编写登录的逻辑</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kn">package</span> <span class="nn">com.gdou.security.controller</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">com.gdou.security.VO.ResultVO</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.security.VO.ResultVOUtil</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.security.entity.User</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.security.service.UserService</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.security.util.Demoutil</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">com.gdou.security.util.JwtTokenUtil</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.beans.factory.annotation.Autowired</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">org.springframework.web.bind.annotation.*</span><span class="o">;</span>

<span class="kn">import</span> <span class="nn">java.sql.ResultSet</span><span class="o">;</span>
<span class="kn">import</span> <span class="nn">java.util.Objects</span><span class="o">;</span>

<span class="cm">/**
</span><span class="cm"> * @ProjectName: security
</span><span class="cm"> * @Package: com.gdou.security.controller
</span><span class="cm"> * @ClassName: UserController
</span><span class="cm"> * @Author: carrymaniac
</span><span class="cm"> * @Description: user controller
</span><span class="cm"> * @Date: 2020/4/27 10:41 上午
</span><span class="cm"> * @Version:
</span><span class="cm"> */</span>
<span class="nd">@RestController</span>
<span class="nd">@RequestMapping</span><span class="o">(</span><span class="s">&#34;/user&#34;</span><span class="o">)</span>
<span class="kd">public</span> <span class="kd">class</span> <span class="nc">UserController</span> <span class="o">{</span>

    <span class="nd">@Autowired</span>
    <span class="n">JwtTokenUtil</span> <span class="n">jwtTokenUtil</span><span class="o">;</span>
    <span class="nd">@Autowired</span>
    <span class="n">UserService</span> <span class="n">userService</span><span class="o">;</span>
    <span class="nd">@PostMapping</span><span class="o">(</span><span class="s">&#34;login&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResultVO</span> <span class="nf">login</span><span class="o">(</span><span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&#34;username&#34;</span><span class="o">)</span> <span class="n">String</span> <span class="n">username</span><span class="o">,</span>
                          <span class="nd">@RequestParam</span><span class="o">(</span><span class="s">&#34;password&#34;</span><span class="o">)</span> <span class="n">String</span> <span class="n">password</span><span class="o">){</span>
                <span class="n">User</span> <span class="n">user</span> <span class="o">=</span> <span class="n">userService</span><span class="o">.</span><span class="na">findUserByName</span><span class="o">(</span><span class="n">username</span><span class="o">);</span>
                <span class="c1">//正常逻辑拿到这些信息，会进行校验，比如说这个账号是否过期等等
</span><span class="c1"></span>                <span class="k">if</span><span class="o">(</span><span class="n">user</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
                    <span class="c1">//之后会有专门的Handler捕获这些Exception
</span><span class="c1"></span>                    <span class="k">return</span> <span class="n">ResultVOUtil</span><span class="o">.</span><span class="na">fail</span><span class="o">(</span><span class="n">100</span><span class="o">,</span><span class="s">&#34;登陆失败&#34;</span><span class="o">);</span>
                <span class="o">}</span>
                <span class="n">password</span> <span class="o">=</span> <span class="n">Demoutil</span><span class="o">.</span><span class="na">md5</span><span class="o">(</span><span class="n">password</span> <span class="o">+</span> <span class="n">user</span><span class="o">.</span><span class="na">getSalt</span><span class="o">());</span>
                <span class="k">if</span><span class="o">(!</span><span class="n">Objects</span><span class="o">.</span><span class="na">equals</span><span class="o">(</span><span class="n">password</span><span class="o">,</span> <span class="n">user</span><span class="o">.</span><span class="na">getPassword</span><span class="o">())){</span>
                    <span class="k">return</span> <span class="n">ResultVOUtil</span><span class="o">.</span><span class="na">fail</span><span class="o">(</span><span class="n">100</span><span class="o">,</span><span class="s">&#34;密码不正确&#34;</span><span class="o">);</span>
                <span class="o">}</span>
        <span class="n">String</span> <span class="n">s</span> <span class="o">=</span> <span class="n">jwtTokenUtil</span><span class="o">.</span><span class="na">generateToken</span><span class="o">(</span><span class="n">user</span><span class="o">);</span>

        <span class="k">return</span> <span class="n">ResultVOUtil</span><span class="o">.</span><span class="na">success</span><span class="o">(</span><span class="n">s</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;testForLogin&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResultVO</span> <span class="nf">testFun</span><span class="o">(){</span>
        <span class="k">return</span> <span class="n">ResultVOUtil</span><span class="o">.</span><span class="na">success</span><span class="o">(</span><span class="s">&#34;你成功了&#34;</span><span class="o">);</span>
    <span class="o">}</span>

    <span class="nd">@GetMapping</span><span class="o">(</span><span class="s">&#34;testForAdmin&#34;</span><span class="o">)</span>
    <span class="kd">public</span> <span class="n">ResultVO</span> <span class="nf">testFunForAdmin</span><span class="o">(){</span>
        <span class="k">return</span> <span class="n">ResultVOUtil</span><span class="o">.</span><span class="na">success</span><span class="o">(</span><span class="s">&#34;admin你成功了&#34;</span><span class="o">);</span>
    <span class="o">}</span>
<span class="o">}</span>

</code></pre></div><h3 id="坑">坑</h3>
<h4 id="一">一</h4>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="n">java</span><span class="o">.</span><span class="na">lang</span><span class="o">.</span><span class="na">NoClassDefFoundError</span><span class="o">:</span> <span class="n">javax</span><span class="o">/</span><span class="n">xml</span><span class="o">/</span><span class="n">bind</span><span class="o">/</span><span class="n">DatatypeConverter</span>
</code></pre></div><p>当运行Jwts.builder().signWith的时候，系统报错，而这个错误在其余人的博文并没发生。查了一下找出了原因：</p>
<p><code>JAXB API是java EE 的API，因此在java SE 9.0 中不再包含这个 Jar 包。java 9 中引入了模块的概念，默认情况下，Java SE中将不再包含java EE 的Jar包而在 java 6/7 / 8 时关于这个API 都是捆绑在一起的</code></p>
<p>解决方案为加入缺失的包的依赖：</p>
<div class="highlight"><pre class="chroma"><code class="language-xml" data-lang="xml">		<span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>javax.xml.bind<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>jaxb-api<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>2.3.0<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>com.sun.xml.bind<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>jaxb-impl<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>2.3.0<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>com.sun.xml.bind<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>jaxb-core<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>2.3.0<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
    <span class="nt">&lt;dependency&gt;</span>
        <span class="nt">&lt;groupId&gt;</span>javax.activation<span class="nt">&lt;/groupId&gt;</span>
        <span class="nt">&lt;artifactId&gt;</span>activation<span class="nt">&lt;/artifactId&gt;</span>
        <span class="nt">&lt;version&gt;</span>1.1.1<span class="nt">&lt;/version&gt;</span>
    <span class="nt">&lt;/dependency&gt;</span>
</code></pre></div><h4 id="二">二</h4>
<p><code>@Value</code> 无法读取到值</p>
<p>原因：<code>使用@Value取值的类，需要是一个Spring装载的组件</code></p>
<p>解决方案：<code>加上@Component注解</code></p>
]]></content>
		</item>
		
		<item>
			<title>小后台学Vue</title>
			<link>https://carrymaniac.github.io/posts/vue-learn/</link>
			<pubDate>Sun, 19 Apr 2020 23:18:17 +0800</pubDate>
			
			<guid>https://carrymaniac.github.io/posts/vue-learn/</guid>
			<description>[TOC]
vue指令 v-text：设置替换普通文本，和{{ }}效果类似： &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;ie=edge&amp;#34;&amp;gt; &amp;lt;title&amp;gt;vue&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;h2 id=&amp;#34;data&amp;#34;&amp;gt;这是一个信息:{{message}}&amp;lt;/h2&amp;gt; &amp;lt;div v-text=&amp;#34;info&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&amp;#34;&amp;gt;&amp;lt;/script&amp;gt; &amp;lt;script&amp;gt; var app = new Vue({ el:&amp;#34;#app&amp;#34;, data:{ message:&amp;#34;这是gdou&amp;#34;, info:&amp;#34;这是info&amp;#34; } }) &amp;lt;/script&amp;gt; &amp;lt;/body&amp;gt; &amp;lt;/html&amp;gt; v-html :用于拼接html代码块，与v-text有所区别 &amp;lt;!DOCTYPE html&amp;gt; &amp;lt;html lang=&amp;#34;en&amp;#34;&amp;gt; &amp;lt;head&amp;gt; &amp;lt;meta charset=&amp;#34;UTF-8&amp;#34;&amp;gt; &amp;lt;meta name=&amp;#34;viewport&amp;#34; content=&amp;#34;width=device-width, initial-scale=1.0&amp;#34;&amp;gt; &amp;lt;meta http-equiv=&amp;#34;X-UA-Compatible&amp;#34; content=&amp;#34;ie=edge&amp;#34;&amp;gt; &amp;lt;title&amp;gt;vue&amp;lt;/title&amp;gt; &amp;lt;/head&amp;gt; &amp;lt;body&amp;gt; &amp;lt;div id=&amp;#34;app&amp;#34;&amp;gt; &amp;lt;h2 id=&amp;#34;data&amp;#34;&amp;gt;这是一个信息:{{message}}&amp;lt;/h2&amp;gt; &amp;lt;div v-text=&amp;#34;info&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;div v-html=&amp;#34;htmlcode&amp;#34;&amp;gt;&amp;lt;/div&amp;gt; &amp;lt;/div&amp;gt; &amp;lt;script src=&amp;#34;https://cdn.</description>
			<content type="html"><![CDATA[<p>[TOC]</p>
<h2 id="vue指令">vue指令</h2>
<h3 id="v-text设置替换普通文本和-效果类似">v-text：设置替换普通文本，和{{ }}效果类似：</h3>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html">    <span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>vue<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">h2</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;data&#34;</span><span class="p">&gt;</span>这是一个信息:{{message}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-text</span><span class="o">=</span><span class="s">&#34;info&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
            <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
                <span class="nx">el</span><span class="o">:</span><span class="s2">&#34;#app&#34;</span><span class="p">,</span>
                <span class="nx">data</span><span class="o">:</span><span class="p">{</span>
                    <span class="nx">message</span><span class="o">:</span><span class="s2">&#34;这是gdou&#34;</span><span class="p">,</span>
                    <span class="nx">info</span><span class="o">:</span><span class="s2">&#34;这是info&#34;</span>
                <span class="p">}</span>
            <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><h3 id="v-html-用于拼接html代码块与v-text有所区别">v-html :用于拼接html代码块，与v-text有所区别</h3>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>vue<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">h2</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;data&#34;</span><span class="p">&gt;</span>这是一个信息:{{message}}<span class="p">&lt;/</span><span class="nt">h2</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-text</span><span class="o">=</span><span class="s">&#34;info&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-html</span><span class="o">=</span><span class="s">&#34;htmlcode&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
            <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
                <span class="nx">el</span><span class="o">:</span><span class="s2">&#34;#app&#34;</span><span class="p">,</span>
                <span class="nx">data</span><span class="o">:</span><span class="p">{</span>
                    <span class="nx">message</span><span class="o">:</span><span class="s2">&#34;这是gdou&#34;</span><span class="p">,</span>
                    <span class="nx">info</span><span class="o">:</span><span class="s2">&#34;这是info&#34;</span><span class="p">,</span>
                    <span class="nx">htmlcode</span><span class="o">:</span><span class="s2">&#34;&lt;a href=&#39;http://www.baidu.com&#39; target=&#39;_blank&#39; rel=&#39;noopener noreferrer&#39;&gt;百度一哈？&lt;/a&gt;&#34;</span>
                <span class="p">}</span>
            <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><h3 id="v-on-绑定事件">v-on ：绑定事件</h3>
<p>其中有v-on:click=&quot;doit&rdquo;(单击事件)
v-on:monseenter=&quot;doit&rdquo;(鼠标进入事件)
v-on:dblclick=&quot;doit&rdquo;(鼠标双击事件)
其中，可以使用@来替换v-on:,即使用@dblclick来实现同样的功能,在vue方法中可以使用this.XX来操作数据</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Vue-learn<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">div</span> <span class="na">v-text</span><span class="o">=</span><span class="s">&#34;food&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;button&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;v-on&#34;</span> <span class="na">v-on:click</span><span class="o">=</span><span class="s">&#34;doIt&#34;</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;button&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;v-on for @&#34;</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;change&#34;</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">input</span> <span class="na">type</span><span class="o">=</span><span class="s">&#34;button&#34;</span> <span class="na">value</span><span class="o">=</span><span class="s">&#34;v-on for double&#34;</span> <span class="err">@</span><span class="na">dblclick</span><span class="o">=</span><span class="s">&#34;doItdbl&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

        <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
            <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
                <span class="nx">el</span><span class="o">:</span><span class="s2">&#34;#app&#34;</span><span class="p">,</span>
                <span class="nx">data</span><span class="o">:</span><span class="p">{</span>
                    <span class="nx">food</span><span class="o">:</span><span class="s2">&#34;西兰花🥦&#34;</span>
                <span class="p">},</span>
                <span class="nx">methods</span><span class="o">:</span><span class="p">{</span>
                    <span class="nx">doIt</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
                        <span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;just do it&#34;</span><span class="p">)</span>
                    <span class="p">},</span>
                    <span class="nx">doItdbl</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
                        <span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;just do it for double &#34;</span><span class="p">)</span>
                    <span class="p">},</span>
                    <span class="nx">change</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
                        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">food</span><span class="p">)</span>
                        <span class="k">this</span><span class="p">.</span><span class="nx">food</span> <span class="o">=</span> <span class="s2">&#34;番茄🍅炒鸡蛋🥚&#34;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">})</span>
        <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><h3 id="实例代码计数器">实例代码：计数器</h3>
<p>代码如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Document<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>

    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">class</span><span class="o">=</span><span class="s">&#34;input-num&#34;</span><span class="p">&gt;</span>
        <span class="c">&lt;!-- @绑定方法 --&gt;</span>
            <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;sub&#34;</span><span class="p">&gt;</span>-<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">span</span><span class="p">&gt;</span>{{number}}<span class="p">&lt;/</span><span class="nt">span</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;add&#34;</span><span class="p">&gt;</span>+<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>


    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="c1">// el 设置挂载点
</span><span class="c1"></span>            <span class="nx">el</span><span class="o">:</span><span class="s2">&#34;#app&#34;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span><span class="p">{</span>
                <span class="nx">number</span><span class="o">:</span><span class="mi">1</span>
            <span class="p">},</span>
            <span class="nx">methods</span><span class="o">:</span><span class="p">{</span>
                <span class="nx">add</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">number</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">number</span><span class="o">+</span><span class="mi">1</span>
                <span class="p">},</span>
                <span class="nx">sub</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
                    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">number</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
                        <span class="k">this</span><span class="p">.</span><span class="nx">number</span> <span class="o">=</span> <span class="k">this</span><span class="p">.</span><span class="nx">number</span><span class="o">-</span><span class="mi">1</span>
                    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                        <span class="nx">alert</span><span class="p">(</span><span class="s2">&#34;最小啦，别点了&#34;</span><span class="p">)</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><ul>
<li>v-show指令
指定元素是否显示,可以使用表达式、布尔值、变量,代码如下：</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Document<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
            <span class="c">&lt;!-- 布尔值变量 --&gt;</span>
            <span class="p">&lt;</span><span class="nt">img</span> <span class="na">v-show</span><span class="o">=</span><span class="s">&#34;isShow&#34;</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://image.gcores.com/f3a8d8c6-7921-406b-8db8-675787f04340.jpg&#34;</span> <span class="na">alt</span><span class="o">=</span><span class="s">&#34;极乐迪斯科&#34;</span> <span class="na">srcset</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>
            <span class="c">&lt;!-- 表达式 --&gt;</span>
            <span class="p">&lt;</span><span class="nt">img</span> <span class="na">v-show</span><span class="o">=</span><span class="s">&#34;age&gt;22&#34;</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://image.gcores.com/f3a8d8c6-7921-406b-8db8-675787f04340.jpg&#34;</span> <span class="na">alt</span><span class="o">=</span><span class="s">&#34;极乐迪斯科&#34;</span> <span class="na">srcset</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;changeIsShow&#34;</span><span class="p">&gt;</span>change is show<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">button</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;changeAge&#34;</span><span class="p">&gt;</span>change age<span class="p">&lt;/</span><span class="nt">button</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span><span class="s2">&#34;#app&#34;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span><span class="p">{</span>
                <span class="nx">isShow</span><span class="o">:</span><span class="kc">true</span><span class="p">,</span>
                <span class="nx">age</span><span class="o">:</span><span class="mi">19</span>
            <span class="p">},</span>
            <span class="nx">methods</span><span class="o">:</span><span class="p">{</span>
                <span class="nx">changeIsShow</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">isShow</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isShow</span>
                <span class="p">},</span>
                <span class="nx">changeAge</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="o">++</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><h3 id="v-if">v-if</h3>
<p>v-if和v-show基本上差不多，和v-show不同的是，v-show不显示的时候是修改了对象的dispaly的属性(display:none),而if是直接将对象在dom树中删除，在实际代码中，如果该元素频繁切换，则使用v-show，因为频繁操作dom树的性能代价较大。而如果不经常切换的元素，则使用v-if即可</p>
<h3 id="v-bind">v-bind</h3>
<p>用于修改元素的属性：例如：</p>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Document<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
        <span class="p">.</span><span class="nc">active</span><span class="p">{</span>
            <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">img</span> <span class="na">:src</span><span class="o">=</span><span class="s">&#34;imgSrc&#34;</span> <span class="na">:tittle</span><span class="o">=</span><span class="s">&#34;imgTittile+&#39;!!!&#39;&#34;</span> <span class="na">:class</span><span class="o">=</span><span class="s">&#34;isActive?&#39;active&#39;:&#39;&#39;&#34;</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">img</span> <span class="na">v-bind:tittle</span><span class="o">=</span><span class="s">&#34;imgTittile+&#39;!!!&#39;&#34;</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">img</span> <span class="na">v-bind:class</span><span class="o">=</span><span class="s">&#34;isActive?&#39;active&#39;:&#39;&#39;&#34;</span><span class="p">&gt;</span>
            <span class="p">&lt;</span><span class="nt">img</span> <span class="na">v-bind:class</span><span class="o">=</span><span class="s">&#34;{active:isActive}&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span><span class="s2">&#34;#app&#34;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span><span class="p">{</span>
                <span class="nx">imgSrc</span><span class="o">:</span><span class="s2">&#34;https://image.gcores.com/f3a8d8c6-7921-406b-8db8-675787f04340.jpg&#34;</span><span class="p">,</span>
                <span class="nx">imgTittile</span><span class="o">:</span><span class="s2">&#34;极乐迪斯科&#34;</span><span class="p">,</span>
                <span class="nx">isActive</span><span class="o">:</span><span class="kc">true</span>
            <span class="p">},</span>
            <span class="nx">methods</span><span class="o">:</span><span class="p">{</span>
                <span class="nx">changeIsShow</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">isShow</span> <span class="o">=</span> <span class="o">!</span><span class="k">this</span><span class="p">.</span><span class="nx">isShow</span>
                <span class="p">},</span>
                <span class="nx">changeAge</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
                    <span class="k">this</span><span class="p">.</span><span class="nx">age</span><span class="o">++</span><span class="p">;</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><p>其中，v-bind 可以省略为,即使用:</p>
<h3 id="轮播图">轮播图</h3>
<div class="highlight"><pre class="chroma"><code class="language-html" data-lang="html"><span class="cp">&lt;!DOCTYPE html&gt;</span>
<span class="p">&lt;</span><span class="nt">html</span> <span class="na">lang</span><span class="o">=</span><span class="s">&#34;en&#34;</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">head</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">charset</span><span class="o">=</span><span class="s">&#34;UTF-8&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">name</span><span class="o">=</span><span class="s">&#34;viewport&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;width=device-width, initial-scale=1.0&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">meta</span> <span class="na">http-equiv</span><span class="o">=</span><span class="s">&#34;X-UA-Compatible&#34;</span> <span class="na">content</span><span class="o">=</span><span class="s">&#34;ie=edge&#34;</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">title</span><span class="p">&gt;</span>Document<span class="p">&lt;/</span><span class="nt">title</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">style</span><span class="p">&gt;</span>
        <span class="p">.</span><span class="nc">active</span><span class="p">{</span>
            <span class="k">border</span><span class="p">:</span> <span class="mi">1</span><span class="kt">px</span> <span class="kc">solid</span> <span class="kc">red</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">&lt;/</span><span class="nt">style</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">head</span><span class="p">&gt;</span>
<span class="p">&lt;</span><span class="nt">body</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">div</span> <span class="na">id</span><span class="o">=</span><span class="s">&#34;app&#34;</span><span class="p">&gt;</span>
           <span class="p">&lt;</span><span class="nt">img</span> <span class="na">:src</span><span class="o">=</span><span class="s">&#34;imgArr[index]&#34;</span> <span class="na">alt</span><span class="o">=</span><span class="s">&#34;&#34;</span> <span class="na">srcset</span><span class="o">=</span><span class="s">&#34;&#34;</span><span class="p">&gt;</span>
           <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;prev&#34;</span> <span class="na">v-show</span><span class="o">=</span><span class="s">&#34;index!=0&#34;</span><span class="p">&gt;</span>上一张<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
           <span class="p">&lt;</span><span class="nt">a</span> <span class="na">href</span><span class="o">=</span><span class="s">&#34;#&#34;</span> <span class="err">@</span><span class="na">click</span><span class="o">=</span><span class="s">&#34;next&#34;</span> <span class="na">v-show</span><span class="o">=</span><span class="s">&#34;index&lt;imgArr.length-1&#34;</span><span class="p">&gt;</span>下一张<span class="p">&lt;/</span><span class="nt">a</span><span class="p">&gt;</span>
    <span class="p">&lt;/</span><span class="nt">div</span><span class="p">&gt;</span>

    <span class="p">&lt;</span><span class="nt">script</span> <span class="na">src</span><span class="o">=</span><span class="s">&#34;https://cdn.jsdelivr.net/npm/vue/dist/vue.js&#34;</span><span class="p">&gt;&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nt">script</span><span class="p">&gt;</span>
        <span class="kd">var</span> <span class="nx">app</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
            <span class="nx">el</span><span class="o">:</span><span class="s2">&#34;#app&#34;</span><span class="p">,</span>
            <span class="nx">data</span><span class="o">:</span><span class="p">{</span>
                <span class="nx">imgArr</span><span class="o">:</span><span class="p">[</span><span class="s2">&#34;./img/image-1.png&#34;</span>
                <span class="p">,</span><span class="s2">&#34;./img/image-2.png&#34;</span>
                <span class="p">,</span><span class="s2">&#34;./img/image-3.png&#34;</span>
                <span class="p">,</span><span class="s2">&#34;./img/image-4.png&#34;</span>
                <span class="p">,</span><span class="s2">&#34;./img/image-5.png&#34;</span>
            <span class="p">],</span>
                <span class="nx">index</span><span class="o">:</span><span class="mi">0</span>
            <span class="p">},</span>
            <span class="nx">methods</span><span class="o">:</span><span class="p">{</span>
                <span class="nx">prev</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
                    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">&gt;</span><span class="mi">0</span><span class="p">){</span>
                        <span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">--</span><span class="p">;</span>
                        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">)</span>
                    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                        <span class="k">this</span><span class="p">.</span><span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="nx">next</span><span class="o">:</span><span class="kd">function</span><span class="p">(){</span>
                    <span class="k">if</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">&lt;</span><span class="mi">4</span><span class="p">){</span>
                        <span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">++</span><span class="p">;</span>
                        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="p">)</span>
                    <span class="p">}</span><span class="k">else</span><span class="p">{</span>
                        <span class="k">this</span><span class="p">.</span><span class="nx">index</span><span class="o">=</span><span class="mi">4</span><span class="p">;</span>
                    <span class="p">}</span>
                <span class="p">}</span>
            <span class="p">}</span>
        <span class="p">})</span>
    <span class="p">&lt;/</span><span class="nt">script</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">body</span><span class="p">&gt;</span>
<span class="p">&lt;/</span><span class="nt">html</span><span class="p">&gt;</span>
</code></pre></div><h3 id="vue绑定">Vue绑定</h3>
<p>使用v-model进行的绑定是双向的绑定
而v-bind只是单向的，显示输出</p>
<hr>
<h2 id="过滤器">过滤器</h2>
<p>过滤器</p>
<p>可以用在mustache插值和v-bind表达式</p>
<p>格式：{{name|nameope}}</p>
<p>可分为全局过滤器和局部过滤器（单个实例私有）</p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">Vue</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;dateFormat&#39;</span><span class="p">,</span><span class="kd">function</span><span class="p">(</span><span class="nx">dateStr</span><span class="p">){</span>
        <span class="kd">let</span> <span class="nx">dt</span> <span class="o">=</span> <span class="k">new</span> <span class="nb">Date</span><span class="p">(</span><span class="nx">dateStr</span><span class="p">)</span>
        <span class="kd">var</span> <span class="nx">y</span> <span class="o">=</span> <span class="nx">dt</span><span class="p">.</span><span class="nx">getFullYear</span><span class="p">()</span>
        <span class="kd">var</span> <span class="nx">m</span> <span class="o">=</span> <span class="nx">dt</span><span class="p">.</span><span class="nx">getMonth</span><span class="p">()</span> <span class="o">+</span> <span class="mi">1</span> 
        <span class="kd">var</span> <span class="nx">d</span> <span class="o">=</span> <span class="nx">dt</span><span class="p">.</span><span class="nx">getDate</span><span class="p">().</span><span class="nx">toString</span><span class="p">.</span>
        <span class="c1">// return y+&#34;-&#34;+m+&#34;-&#34;+d
</span><span class="c1"></span>        <span class="k">return</span> <span class="sb">`</span><span class="si">${</span><span class="nx">y</span><span class="si">}</span><span class="sb">-</span><span class="si">${</span><span class="nx">m</span><span class="si">}</span><span class="sb">-</span><span class="si">${</span><span class="nx">d</span><span class="si">}</span><span class="sb">`</span>
    <span class="p">})</span>

<span class="nx">Vue</span><span class="p">.</span><span class="nx">filter</span><span class="p">(</span><span class="s1">&#39;date&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">format</span><span class="p">)</span> <span class="p">{</span>
  <span class="c1">// value 要过滤的字符串内容，比如：dateStr
</span><span class="c1"></span>  <span class="c1">// format 过滤器的参数，比如：&#39;YYYY-MM-DD hh:mm:ss&#39;
</span><span class="c1"></span><span class="p">})</span>
</code></pre></div><p>私有过滤器在<code>filters:{ }</code>中定义 </p>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="p">{</span>
  <span class="nx">data</span><span class="o">:</span> <span class="p">{},</span>
  <span class="c1">// 通过 filters 属性创建局部过滤器
</span><span class="c1"></span>  <span class="c1">// 注意：此处为 filters
</span><span class="c1"></span>  <span class="nx">filters</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">filterName</span><span class="o">:</span> <span class="kd">function</span><span class="p">(</span><span class="nx">value</span><span class="p">,</span> <span class="nx">format</span><span class="p">)</span> <span class="p">{}</span>
  <span class="p">}</span>
<span class="p">}</span>
</code></pre></div><h2 id="自定义指令">自定义指令</h2>
<ul>
<li>作用：进行DOM操作</li>
<li>使用场景：对纯 DOM 元素进行底层操作，比如：文本框获得焦点</li>
<li>也是分为两种：1 全局指令 2 局部指令</li>
</ul>
<div class="highlight"><pre class="chroma"><code class="language-js" data-lang="js"><span class="nx">Vue</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;directiveName&#39;</span><span class="p">,</span> <span class="p">{</span>
  <span class="c1">// bind中只能对元素自身进行DOM操作，而无法对父级元素操作
</span><span class="c1"></span>  <span class="c1">// 只调用一次 指令第一次绑定到元素时调用。在这里可以进行一次性的初始化设置。
</span><span class="c1"></span>  <span class="nx">bind</span><span class="p">(</span> <span class="nx">el</span><span class="err">，</span><span class="nx">binding</span><span class="p">,</span> <span class="nx">vnode</span> <span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 参数详解
</span><span class="c1"></span>    <span class="c1">// el：指令所绑定的元素，可以用来直接操作 DOM 。
</span><span class="c1"></span>    <span class="c1">// binding：一个对象（准确的说是指指令对象），包含以下属性：
</span><span class="c1"></span>      <span class="c1">// name：指令名，不包括 v- 前缀。
</span><span class="c1"></span>      <span class="c1">// value：指令的绑定值，等号后面的值 。
</span><span class="c1"></span>      <span class="c1">// oldValue：指令绑定的前一个值，仅在 update 和 componentUpdated 钩子中可用。无论值是否改变都可用。
</span><span class="c1"></span>      <span class="c1">// expression：字符串形式的指令表达式 等号后面的字符串 形式
</span><span class="c1"></span>      <span class="c1">// arg：传给指令的参数，可选。例如 v-my-directive:foo 中，参数为 &#34;foo&#34;。
</span><span class="c1"></span>      <span class="c1">// modifiers：指令修饰符。例如：v-directive.foo.bar中，修饰符对象为 { foo: true, bar: true }。
</span><span class="c1"></span>    <span class="c1">// vnode：Vue 编译生成的虚拟节点。。
</span><span class="c1"></span>    <span class="c1">// oldVnode：上一个虚拟节点，仅在 update 和 componentUpdated 钩子中可用。
</span><span class="c1"></span>  <span class="p">},</span>
  <span class="c1">// inserted这个钩子函数调用的时候，当前元素已经插入页面中了，也就是说可以获取到父级节点了
</span><span class="c1"></span>  <span class="nx">inserted</span> <span class="p">(</span>  <span class="nx">el</span><span class="err">，</span><span class="nx">binding</span><span class="p">,</span> <span class="nx">vnode</span> <span class="p">)</span> <span class="p">{},</span>
  <span class="c1">//  DOM重新渲染前
</span><span class="c1"></span>  <span class="nx">update</span><span class="p">(</span><span class="nx">el</span><span class="err">，</span><span class="nx">binding</span><span class="p">,</span> <span class="nx">vnode</span><span class="p">,</span><span class="nx">oldVnode</span><span class="p">)</span> <span class="p">{},</span>
  <span class="c1">// DOM重新渲染后
</span><span class="c1"></span>  <span class="nx">componentUpdated</span> <span class="p">(</span> <span class="nx">el</span><span class="err">，</span><span class="nx">binding</span><span class="p">,</span> <span class="nx">vnode</span><span class="p">,</span><span class="nx">oldVnode</span> <span class="p">)</span> <span class="p">{},</span>
  <span class="c1">// 只调用一次，指令与元素解绑时调用
</span><span class="c1"></span>  <span class="nx">unbind</span> <span class="p">(</span> <span class="nx">el</span> <span class="p">)</span> <span class="p">{</span>
    <span class="c1">// 指令所在的元素在页面中消失，触发
</span><span class="c1"></span>  <span class="p">}</span>
<span class="p">})</span>
<span class="c1">// 简写 如果你想在 bind 和 update 时触发相同行为，而不关心其它的钩子:
</span><span class="c1"></span><span class="nx">Vue</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;自定义指令名&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span> <span class="nx">el</span><span class="p">,</span> <span class="nx">binding</span> <span class="p">)</span> <span class="p">{})</span>
<span class="c1">// 例：
</span><span class="c1"></span><span class="nx">Vue</span><span class="p">.</span><span class="nx">directive</span><span class="p">(</span><span class="s1">&#39;color&#39;</span><span class="p">,</span> <span class="kd">function</span><span class="p">(</span><span class="nx">el</span><span class="p">,</span> <span class="nx">binding</span><span class="p">)</span> <span class="p">{</span>
  <span class="nx">el</span><span class="p">.</span><span class="nx">style</span><span class="p">.</span><span class="nx">color</span> <span class="o">=</span> <span class="nx">binging</span><span class="p">.</span><span class="nx">value</span>
<span class="p">})</span>
<span class="c1">// 使用 注意直接些会被i成data中的数据“red” 需要字符串则嵌套引号&#34;&#39;red&#39;&#34;
</span><span class="c1"></span><span class="o">&lt;</span><span class="nx">p</span> <span class="nx">v</span><span class="o">-</span><span class="nx">color</span><span class="o">=</span><span class="s2">&#34;&#39;red&#39;&#34;</span><span class="o">&gt;&lt;</span><span class="err">/p&gt;</span>
</code></pre></div><p>局部定义指令在Vue实例中定义：</p>
<div class="highlight"><pre class="chroma"><code class="language-javascript" data-lang="javascript"><span class="kd">var</span> <span class="nx">vm</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">Vue</span><span class="p">({</span>
  <span class="nx">el</span> <span class="o">:</span> <span class="s2">&#34;#app&#34;</span><span class="p">,</span>
  <span class="nx">directives</span><span class="o">:</span> <span class="p">{</span>
    <span class="nx">directiveName</span><span class="o">:</span> <span class="p">{</span> <span class="p">}</span>
  <span class="p">}</span>
<span class="p">})</span>
</code></pre></div><h2 id="vue-cli脚手架">VUE-CLI脚手架</h2>
<h2 id="axios">axios</h2>
]]></content>
		</item>
		
		<item>
			<title>设计模式</title>
			<link>https://carrymaniac.github.io/posts/dp/</link>
			<pubDate>Sun, 12 Apr 2020 16:53:26 +0800</pubDate>
			
			<guid>https://carrymaniac.github.io/posts/dp/</guid>
			<description>记录一下几个最常问常考的设计模式，供自己回忆
单例设计模式 简单点说，就是一个应用程序中，某个类的实例对象只有一个，你没有办法去new，因为构造器是被private修饰的，一般通过getInstance()的方法来获取它们的实例。
//线程不安全式写法 public class Singleton { private static Singleton singleton; private Singleton(){} public static Singleton getInstance(){ if(singleton == null){ singleton = new Singleton(); } return singleton; } } 懒汉式，即只有在第一次调用的时候才进行初始化
public class Singleton{ private static Singleton instance; private Singleton(){} public static synchronized Singleton getInstance(){ if(instance==null){ instance = new Singleton(); } return instance; } } 饿汉写法,在创建类的时候就完成初始化
public class Singleton{ private static Singleton instance = new Singleton(); private Singleton(){} public static Singleton getInstance(){ return instance; } } 双重校验锁，这个较为常考</description>
			<content type="html"><![CDATA[<p>记录一下几个最常问常考的设计模式，供自己回忆</p>
<h2 id="单例设计模式">单例设计模式</h2>
<p>简单点说，就是一个应用程序中，某个类的实例对象只有一个，你没有办法去new，因为构造器是被private修饰的，一般通过getInstance()的方法来获取它们的实例。</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="c1">//线程不安全式写法
</span><span class="c1"></span><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span> <span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">singleton</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">(){}</span>

    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">(){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">singleton</span> <span class="o">==</span> <span class="kc">null</span><span class="o">){</span>
            <span class="n">singleton</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">singleton</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>懒汉式，即只有在第一次调用的时候才进行初始化</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">(){}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="kd">synchronized</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">(){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">instance</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
            <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>饿汉写法,在创建类的时候就完成初始化</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">(){}</span>
    <span class="kd">public</span> <span class="kd">static</span>  <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">(){</span>
            <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>双重校验锁，这个较为常考</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kd">volatile</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">(){}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">(){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">instance</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">instance</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
                    <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div><p>静态内部类</p>
<div class="highlight"><pre class="chroma"><code class="language-java" data-lang="java"><span class="kd">public</span> <span class="kd">class</span> <span class="nc">Singleton</span><span class="o">{</span>
    <span class="kd">private</span> <span class="kd">volatile</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="n">instance</span><span class="o">;</span>
    <span class="kd">private</span> <span class="nf">Singleton</span><span class="o">(){}</span>
    <span class="kd">public</span> <span class="kd">static</span> <span class="n">Singleton</span> <span class="nf">getInstance</span><span class="o">(){</span>
        <span class="k">if</span><span class="o">(</span><span class="n">instance</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
            <span class="kd">synchronized</span> <span class="o">(</span><span class="n">Singleton</span><span class="o">.</span><span class="na">class</span><span class="o">){</span>
                <span class="k">if</span><span class="o">(</span><span class="n">instance</span><span class="o">==</span><span class="kc">null</span><span class="o">){</span>
                    <span class="n">instance</span> <span class="o">=</span> <span class="k">new</span> <span class="n">Singleton</span><span class="o">();</span>
                <span class="o">}</span>
            <span class="o">}</span>
        <span class="o">}</span>
        <span class="k">return</span> <span class="n">instance</span><span class="o">;</span>
    <span class="o">}</span>
<span class="o">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>如何设计一个爬虫系统？</title>
			<link>https://carrymaniac.github.io/posts/scheduler/</link>
			<pubDate>Wed, 08 Apr 2020 15:25:42 +0800</pubDate>
			
			<guid>https://carrymaniac.github.io/posts/scheduler/</guid>
			<description>准确的来说，这篇文章并不算一个爬虫的教学，只是最近在复习之前学习的爬虫视频时做的笔记。
其中Engine、Scheduler、worker三者的关系大概如图
大体上结构如此，其中每个模块之间的数据传输均是使用chan来完成，比方说，Scheduler与Worker之间的Request传输使用一个chan string来传输，worker将处理完的数据传给Engine也是使用一个chan string来传输。
上面这个最简单的图，也可以衍生出不同的结构:
 所有的Worker共用同一个chan string从Scheduler来获取数据进行处理, 每个worker和Scheduler之间有一个不共享的chan string来传输数据，Scheduler里有两个队列来缓存请求以及可用的（指目前没有其他request请求需要处理可工作的）worker，当每次同时有请求和worker时，将请求分发给worker。  具体实现请看代码：
package scheduler import &amp;#34;fmt&amp;#34; //engine的主要行为，Run方法启动Engine，createWorker配置启动Worker type Engine interface { Run() createWorker(in chan string,out chan string,scheduler Scheduler) } type CurrentEngine struct { //调度器 	Scheduler Scheduler //工人数量 	WorkerCount int ItemChan chan string //用于存数据 	Processor Processor } //处理请求的函数,worker会调用这个Processor来进行处理数据 type Processor func(string) (string, error) func (c *CurrentEngine) createWorker(in chan string, out chan string, scheduler Scheduler) { //三个参数的含义 	//in chan string 用于 scheduler传输数据给worker进行处理 	//out chan string 用于worker处理完数据后将数据返回给Engine 	//scheduler Scheduler 当worker处理完成之后， 	//调用scheduler.</description>
			<content type="html"><![CDATA[<p>准确的来说，这篇文章并不算一个爬虫的教学，只是最近在复习之前学习的爬虫视频时做的笔记。</p>
<p>其中Engine、Scheduler、worker三者的关系大概如图</p>
<p><img src="https://raw.githubusercontent.com/carrymaniac/pic/master/%E6%9C%AA%E5%91%BD%E5%90%8D%E6%96%87%E4%BB%B6.png" alt=""></p>
<p>大体上结构如此，其中每个模块之间的数据传输均是使用chan来完成，比方说，Scheduler与Worker之间的Request传输使用一个<code>chan string</code>来传输，worker将处理完的数据传给Engine也是使用一个chan string来传输。</p>
<p>上面这个最简单的图，也可以衍生出不同的结构:</p>
<ol>
<li>所有的Worker共用同一个chan string从Scheduler来获取数据进行处理,</li>
<li>每个worker和Scheduler之间有一个不共享的chan string来传输数据，Scheduler里有两个队列来缓存请求以及可用的（指目前没有其他request请求需要处理可工作的）worker，当每次同时有请求和worker时，将请求分发给worker。</li>
</ol>
<p>具体实现请看代码：</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">scheduler</span>

<span class="kn">import</span> <span class="s">&#34;fmt&#34;</span>

<span class="c1">//engine的主要行为，Run方法启动Engine，createWorker配置启动Worker
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Engine</span> <span class="kd">interface</span> <span class="p">{</span>
	<span class="nf">Run</span><span class="p">()</span>
	<span class="nf">createWorker</span><span class="p">(</span><span class="nx">in</span> <span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span><span class="nx">out</span> <span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span><span class="nx">scheduler</span> <span class="nx">Scheduler</span><span class="p">)</span>
<span class="p">}</span>

<span class="kd">type</span> <span class="nx">CurrentEngine</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="c1">//调度器
</span><span class="c1"></span>	<span class="nx">Scheduler</span> <span class="nx">Scheduler</span>
	<span class="c1">//工人数量
</span><span class="c1"></span>	<span class="nx">WorkerCount</span> <span class="kt">int</span>
  <span class="nx">ItemChan</span>         <span class="kd">chan</span> <span class="kt">string</span> <span class="c1">//用于存数据
</span><span class="c1"></span>	<span class="nx">Processor</span> <span class="nx">Processor</span>
<span class="p">}</span>
	<span class="c1">//处理请求的函数,worker会调用这个Processor来进行处理数据
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Processor</span> <span class="kd">func</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span> <span class="p">(</span><span class="kt">string</span><span class="p">,</span> <span class="kt">error</span><span class="p">)</span>


<span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">CurrentEngine</span><span class="p">)</span> <span class="nf">createWorker</span><span class="p">(</span><span class="nx">in</span> <span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">out</span> <span class="kd">chan</span> <span class="kt">string</span><span class="p">,</span> <span class="nx">scheduler</span> <span class="nx">Scheduler</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">//三个参数的含义
</span><span class="c1"></span>	<span class="c1">//in chan string 用于 scheduler传输数据给worker进行处理
</span><span class="c1"></span>	<span class="c1">//out chan string 用于worker处理完数据后将数据返回给Engine
</span><span class="c1"></span>	<span class="c1">//scheduler Scheduler 当worker处理完成之后，
</span><span class="c1"></span>	<span class="c1">//调用scheduler.WorkerReady将自己放进scheduler的WorkerChan中去
</span><span class="c1"></span>	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="k">for</span><span class="p">{</span>
			<span class="nx">scheduler</span><span class="p">.</span><span class="nf">WorkerReady</span><span class="p">(</span><span class="nx">in</span><span class="p">)</span>
			<span class="c1">//从in中获取请求数据
</span><span class="c1"></span>			<span class="nx">request</span> <span class="o">:=</span> <span class="o">&lt;-</span><span class="nx">in</span>
			<span class="c1">//调用Engine里的处理函数进行处理
</span><span class="c1"></span>			<span class="nx">result</span><span class="p">,</span> <span class="nx">e</span> <span class="o">:=</span> <span class="nx">c</span><span class="p">.</span><span class="nf">Processor</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span>
			<span class="k">if</span> <span class="nx">e</span> <span class="o">!=</span> <span class="kc">nil</span><span class="p">{</span>
				<span class="c1">//不进行处理，进行下一个请求处理
</span><span class="c1"></span>			<span class="p">}</span>
			<span class="c1">//将结果传输出去
</span><span class="c1"></span>			<span class="nx">out</span> <span class="o">&lt;-</span> <span class="nx">result</span>
		<span class="p">}</span>
	<span class="p">}()</span>

<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">c</span> <span class="o">*</span><span class="nx">CurrentEngine</span><span class="p">)</span> <span class="nf">Run</span><span class="p">(</span><span class="nx">requests</span> <span class="o">...</span><span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">//启动Scheduler
</span><span class="c1"></span>	<span class="nx">c</span><span class="p">.</span><span class="nx">Scheduler</span><span class="p">.</span><span class="nf">Run</span><span class="p">()</span>
	<span class="c1">//out用于接收处理完的结果
</span><span class="c1"></span>	<span class="nx">out</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>

	<span class="c1">//启动多个Worker
</span><span class="c1"></span>	<span class="k">for</span> <span class="nx">i</span><span class="o">:=</span><span class="mi">0</span><span class="p">;</span><span class="nx">i</span><span class="p">&lt;</span><span class="nx">c</span><span class="p">.</span><span class="nx">WorkerCount</span><span class="p">;</span><span class="nx">i</span><span class="o">++</span><span class="p">{</span>
		<span class="nx">c</span><span class="p">.</span><span class="nf">createWorker</span><span class="p">(</span><span class="nx">c</span><span class="p">.</span><span class="nx">Scheduler</span><span class="p">.</span><span class="nf">WorkerChan</span><span class="p">(),</span><span class="nx">out</span><span class="p">,</span><span class="nx">c</span><span class="p">.</span><span class="nx">Scheduler</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="c1">//提交任务
</span><span class="c1"></span>	<span class="k">for</span> <span class="nx">_</span><span class="p">,</span><span class="nx">request</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">requests</span><span class="p">{</span>
		<span class="nx">c</span><span class="p">.</span><span class="nx">Scheduler</span><span class="p">.</span><span class="nf">Submit</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span>
	<span class="p">}</span>

	<span class="c1">//从out里取出数据
</span><span class="c1"></span>	<span class="nx">i</span> <span class="o">:=</span> <span class="mi">0</span>
	<span class="k">for</span><span class="p">{</span>
		<span class="nx">result</span><span class="o">:=</span> <span class="o">&lt;-</span> <span class="nx">out</span>
		<span class="nx">fmt</span><span class="p">.</span><span class="nf">Print</span><span class="p">(</span><span class="nx">result</span><span class="p">)</span>
    <span class="c1">//将数据放到itemChan，供engine外的其他模块（例如数据库存储等）去读取数据并持久化
</span><span class="c1"></span>    <span class="nx">c</span><span class="p">.</span><span class="nx">itemChan</span> <span class="o">&lt;-</span> <span class="nx">result</span>
		<span class="c1">//这里如果是一个爬虫的话，就会继续讲result中的某些数据取出，再次投进Scheduler中给worker进行处理
</span><span class="c1"></span>		<span class="c1">//这里我假装从result中获取到了新的request
</span><span class="c1"></span>		<span class="nx">newRequests</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="kt">string</span><span class="p">,</span><span class="mi">10</span><span class="p">)</span>
		<span class="k">for</span> <span class="nx">k</span><span class="o">:=</span><span class="mi">0</span><span class="p">;</span><span class="nx">k</span><span class="p">&lt;</span><span class="mi">10</span><span class="p">;</span><span class="nx">k</span><span class="o">++</span><span class="p">{</span>
			<span class="nx">newRequests</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">newRequests</span><span class="p">,</span><span class="nx">fmt</span><span class="p">.</span><span class="nf">Sprint</span><span class="p">(</span><span class="nx">result</span><span class="p">,</span><span class="nx">i</span><span class="p">))</span>
		<span class="p">}</span>
		<span class="c1">//将新的Request放进Scheduler中去
</span><span class="c1"></span>		<span class="k">for</span> <span class="nx">_</span><span class="p">,</span><span class="nx">request</span> <span class="o">:=</span> <span class="k">range</span> <span class="nx">newRequests</span><span class="p">{</span>
			<span class="nx">c</span><span class="p">.</span><span class="nx">Scheduler</span><span class="p">.</span><span class="nf">Submit</span><span class="p">(</span><span class="nx">request</span><span class="p">)</span>
		<span class="p">}</span>
	<span class="p">}</span>
<span class="p">}</span>

</code></pre></div><p>Scheduler的代码如下：</p>
<div class="highlight"><pre class="chroma"><code class="language-GO" data-lang="GO"><span class="kn">package</span> <span class="nx">scheduler</span>


<span class="cm">/**
</span><span class="cm">	什么是scheduler？
</span><span class="cm">	基本上形成了engine --提交任务（数据）--&gt;scheduler --将任务分派给各个Worker --&gt;Work将数据返回给Engine
</span><span class="cm">	Scheduler在这个流程中充当了一个调度器的功能，调度Worker进行工作
</span><span class="cm"> */</span>


<span class="c1">//定义行为
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">Scheduler</span> <span class="kd">interface</span> <span class="p">{</span>
  <span class="c1">//Engine通过Submit方法将请求发给Scheduler，然后由Scheduler分发调配任务给Worker
</span><span class="c1"></span>	<span class="nf">Submit</span><span class="p">(</span><span class="kt">string</span><span class="p">)</span>
	<span class="nf">Run</span><span class="p">()</span>
	<span class="c1">// 返回一个传输数据给worker的通道
</span><span class="c1"></span>	<span class="nf">WorkerChan</span><span class="p">()</span> <span class="kd">chan</span> <span class="kt">string</span>
  <span class="c1">// worker会调用这个方法来告知Scheduler自己已经就绪，可以下发任务给它了
</span><span class="c1"></span>	<span class="nf">WorkerReady</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
<span class="p">}</span>

<span class="c1">//SimpleScheduler,这个Scheduler的worker们共用一个chan，所有的worker都会去一个chan中争抢任务
</span><span class="c1">//可能会造成很多的worker协程一直阻塞浪费资源
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">SimpleScheduler</span> <span class="kd">struct</span> <span class="p">{</span>
		<span class="nx">requestChan</span> <span class="kd">chan</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">SimpleScheduler</span><span class="p">)</span> <span class="nf">WorkerReady</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">SimpleScheduler</span><span class="p">)</span> <span class="nf">Submit</span><span class="p">(</span><span class="nx">submit</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">//起一个go来提交任务给Worker们
</span><span class="c1"></span>	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="nx">s</span><span class="p">.</span><span class="nx">requestChan</span> <span class="o">&lt;-</span> <span class="nx">submit</span>
	<span class="p">}()</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">SimpleScheduler</span><span class="p">)</span> <span class="nf">Run</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">//启动调度器，make一个chanel
</span><span class="c1"></span>	<span class="nx">s</span><span class="p">.</span><span class="nx">requestChan</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
<span class="p">}</span>
<span class="c1">//共用一个Chan，因此每次都直接返回同一个chan
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">s</span> <span class="o">*</span><span class="nx">SimpleScheduler</span><span class="p">)</span> <span class="nf">WorkerChan</span><span class="p">()</span> <span class="kd">chan</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nx">s</span><span class="p">.</span><span class="nx">requestChan</span>
<span class="p">}</span>

<span class="c1">//队列版的调度器
</span><span class="c1"></span><span class="kd">type</span> <span class="nx">QueueScheduler</span> <span class="kd">struct</span> <span class="p">{</span>
	<span class="nx">requestChan</span> <span class="kd">chan</span> <span class="kt">string</span>
	<span class="nx">workerChan</span> <span class="kd">chan</span> <span class="kd">chan</span> <span class="kt">string</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">q</span> <span class="o">*</span><span class="nx">QueueScheduler</span><span class="p">)</span> <span class="nf">WorkerReady</span><span class="p">(</span><span class="nx">w</span> <span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="c1">//当worker就绪了可以进行下一个处理的时候，将其加入到workChan里去
</span><span class="c1"></span>	<span class="nx">q</span><span class="p">.</span><span class="nx">workerChan</span> <span class="o">&lt;-</span> <span class="nx">w</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">q</span> <span class="o">*</span><span class="nx">QueueScheduler</span><span class="p">)</span> <span class="nf">Submit</span><span class="p">(</span><span class="nx">sub</span> <span class="kt">string</span><span class="p">)</span> <span class="p">{</span>
	<span class="nx">q</span><span class="p">.</span><span class="nx">requestChan</span> <span class="o">&lt;-</span> <span class="nx">sub</span>
<span class="p">}</span>

<span class="kd">func</span> <span class="p">(</span><span class="nx">q</span> <span class="o">*</span><span class="nx">QueueScheduler</span><span class="p">)</span> <span class="nf">Run</span><span class="p">()</span> <span class="p">{</span>
	<span class="c1">//先初始化两个chan
</span><span class="c1"></span>	<span class="nx">q</span><span class="p">.</span><span class="nx">requestChan</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
	<span class="nx">q</span><span class="p">.</span><span class="nx">workerChan</span> <span class="p">=</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
	<span class="k">go</span> <span class="kd">func</span><span class="p">()</span> <span class="p">{</span>
		<span class="kd">var</span> <span class="nx">requestQ</span> <span class="p">[]</span><span class="kt">string</span>
		<span class="kd">var</span> <span class="nx">workerQ</span> <span class="p">[]</span><span class="kd">chan</span> <span class="kt">string</span>

		<span class="k">for</span><span class="p">{</span>
			<span class="kd">var</span> <span class="nx">activeWorker</span> <span class="kd">chan</span> <span class="kt">string</span>
			<span class="kd">var</span> <span class="nx">activeRequest</span> <span class="kt">string</span>
			<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="nx">requestQ</span><span class="p">)&gt;</span><span class="mi">0</span> <span class="o">&amp;&amp;</span> <span class="nb">len</span><span class="p">(</span><span class="nx">workerQ</span><span class="p">)&gt;</span><span class="mi">0</span><span class="p">{</span>
				<span class="c1">//取出任务和worker
</span><span class="c1"></span>				<span class="nx">activeRequest</span> <span class="p">=</span> <span class="nx">requestQ</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
				<span class="nx">activeWorker</span> <span class="p">=</span> <span class="nx">workerQ</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
			<span class="p">}</span>
			<span class="k">select</span> <span class="p">{</span>
				<span class="k">case</span> <span class="nx">r</span> <span class="o">:=</span> <span class="o">&lt;-</span> <span class="nx">q</span><span class="p">.</span><span class="nx">requestChan</span><span class="p">:</span>
					<span class="c1">//取到任务了，加进队列去
</span><span class="c1"></span>					<span class="nx">requestQ</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">requestQ</span><span class="p">,</span> <span class="nx">r</span><span class="p">)</span>
				<span class="k">case</span> <span class="nx">w</span> <span class="o">:=</span> <span class="o">&lt;-</span> <span class="nx">q</span><span class="p">.</span><span class="nx">workerChan</span><span class="p">:</span>
					<span class="c1">//取到工人了，加到工人队列去
</span><span class="c1"></span>					<span class="nx">workerQ</span> <span class="p">=</span> <span class="nb">append</span><span class="p">(</span><span class="nx">workerQ</span><span class="p">,</span><span class="nx">w</span><span class="p">)</span>
        	<span class="c1">//将任务分发给worker
</span><span class="c1"></span>				<span class="k">case</span> <span class="nx">activeWorker</span> <span class="o">&lt;-</span> <span class="nx">activeRequest</span><span class="p">:</span>
					<span class="nx">workerQ</span> <span class="p">=</span> <span class="nx">workerQ</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
					<span class="nx">requestQ</span> <span class="p">=</span> <span class="nx">requestQ</span><span class="p">[</span><span class="mi">1</span><span class="p">:]</span>
			<span class="p">}</span>
		<span class="p">}</span>
	<span class="p">}()</span>
<span class="p">}</span>
<span class="c1">//每次都新建一个chan返回
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">q</span> <span class="o">*</span><span class="nx">QueueScheduler</span><span class="p">)</span> <span class="nf">WorkerChan</span><span class="p">()</span> <span class="kd">chan</span> <span class="kt">string</span> <span class="p">{</span>
	<span class="k">return</span> <span class="nb">make</span><span class="p">(</span><span class="kd">chan</span> <span class="kt">string</span><span class="p">)</span>
<span class="p">}</span>

</code></pre></div><p>下面是主函数：</p>
<div class="highlight"><pre class="chroma"><code class="language-GO" data-lang="GO"><span class="kd">func</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="c1">//获取一个Mysql的存储Chan，engine将结果通过这个channel传输给Mysql
</span><span class="c1"></span>  <span class="nx">itemChan</span> <span class="o">:=</span> <span class="nx">MysqlServer</span><span class="p">.</span><span class="nf">getChannel</span><span class="p">()</span>
  <span class="nx">e</span> <span class="o">:=</span> <span class="nx">engine</span><span class="p">.</span><span class="nx">ConcurrentEngine</span><span class="p">{</span>
		<span class="c1">//Scheduler:&amp;scheduler.SimpleScheduler{},
</span><span class="c1"></span>		<span class="nx">Scheduler</span><span class="p">:</span>        <span class="o">&amp;</span><span class="nx">scheduler</span><span class="p">.</span><span class="nx">QueuedScheduler</span><span class="p">{},</span>
		<span class="nx">WorkerCount</span><span class="p">:</span>      <span class="mi">100</span><span class="p">,</span>
		<span class="nx">ItemChan</span><span class="p">:</span>         <span class="nx">itemChan</span><span class="p">,</span>
    <span class="nx">RequestProcessor</span><span class="p">:</span> <span class="kd">func</span><span class="p">(</span><span class="nx">str</span> <span class="kt">string</span><span class="p">){</span><span class="nx">XXXXX</span><span class="p">},</span> <span class="c1">//func对Request进行处理
</span><span class="c1"></span>	<span class="p">}</span>
  <span class="c1">//将初始的数据放进去Engine进行处理
</span><span class="c1"></span>	<span class="nx">e</span><span class="p">.</span><span class="nf">Run</span><span class="p">(</span><span class="s">&#34;www.baidu.com&#34;</span><span class="p">)</span>
<span class="p">}</span>
</code></pre></div>]]></content>
		</item>
		
		<item>
			<title>如何使用Hugo&#43;GithubPage搭建一个简单的博客</title>
			<link>https://carrymaniac.github.io/posts/how/</link>
			<pubDate>Mon, 06 Apr 2020 15:52:49 +0800</pubDate>
			
			<guid>https://carrymaniac.github.io/posts/how/</guid>
			<description>起因是因为在搜go相关知识的时候，搜到了一个博客，样式很好看，心想着也要搭建一个人博客，原先是想着自己开发手写一个博客出来，但是思考了一下这样的造轮子没什么意义。因此开始折腾如何使用hugo来搭建一个个人博客。
第一步 下载安装hugo  这一部分建议参考 www.gohugo.org 这应该是一个Hugo粉丝自己的社区网站，在这里可以了解如何安装hugo mac用户用brew安装就行，会自动配置好env环境变量  第二步 配置Github Page  GithubPage的官方介绍：https://pages.github.com/ 简要的来说 就是创建好一个repository，主要是这个repository的名字需要写好，名字应该为username.github.io，项目的链接为https://github.com/username/username.github.io  第三步 Hugo站点 hugo new site changmen-blog # 新建一个叫changmen-blog的站点 hugo new post/my-first-post.md # 新建一篇叫my-first-post的文章，用markdown格式 //对文章进行编辑 hugo server -D # 启动本地服务器进行预览 # 此时可以使用127.0.0.1:1313进行预览博客样式 如果想对样式进行调整，可在hugo的样式库里面找到自己喜欢的主题，并按照其中的配置修改主目录下的config.toml，我现在用的是一个国人设计的hermit.
第四部 部署到git 首先使用hugo进行构建，默认将静态站点保存到 &amp;ldquo;public&amp;rdquo; 目录。
之后进入到public文件夹，git init进行初始化
git init ## 这里carrymaniac/carrymaniac.github.io记得换成你自己的 git remote add origin git@github.com:carrymaniac/carrymaniac.github.io ## 因为origin的master在创建的时候新建了个Readme，所以需要合并一下 git pull origin master --allow-unrelated-histories git status git add . git commit -m &amp;#34;add new post&amp;#34; git push -u origin master 此时便完成了一个人博客的部署</description>
			<content type="html"><![CDATA[<p>起因是因为在搜go相关知识的时候，搜到了一个博客，样式很好看，心想着也要搭建一个人博客，原先是想着自己开发手写一个博客出来，但是思考了一下这样的造轮子没什么意义。因此开始折腾如何使用hugo来搭建一个个人博客。</p>
<h2 id="第一步-下载安装hugo">第一步 下载安装hugo</h2>
<ul>
<li>这一部分建议参考 <a href="http://www.gohugo.org">www.gohugo.org</a> 这应该是一个Hugo粉丝自己的社区网站，在这里可以了解如何安装hugo</li>
<li>mac用户用brew安装就行，会自动配置好env环境变量</li>
</ul>
<h2 id="第二步-配置github-page">第二步 配置Github Page</h2>
<ul>
<li>GithubPage的官方介绍：https://pages.github.com/</li>
<li>简要的来说 就是创建好一个repository，主要是这个repository的名字需要写好，名字应该为<code>username.github.io</code>，项目的链接为<code>https://github.com/username/username.github.io</code></li>
</ul>
<h2 id="第三步-hugo站点">第三步 Hugo站点</h2>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">hugo new site changmen-blog <span class="c1"># 新建一个叫changmen-blog的站点</span>
hugo new post/my-first-post.md <span class="c1"># 新建一篇叫my-first-post的文章，用markdown格式</span>
//对文章进行编辑

hugo server -D <span class="c1"># 启动本地服务器进行预览</span>
<span class="c1"># 此时可以使用127.0.0.1:1313进行预览博客样式</span>
</code></pre></div><p>如果想对样式进行调整，可在hugo的样式库里面找到自己喜欢的主题，并按照其中的配置修改主目录下的<code>config.toml</code>，我现在用的是一个国人设计的<code>hermit</code>.</p>
<h2 id="第四部-部署到git">第四部 部署到git</h2>
<p>首先使用<code>hugo</code>进行构建，默认将静态站点保存到 &ldquo;public&rdquo; 目录。</p>
<p>之后进入到public文件夹，git init进行初始化</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh">git init 
<span class="c1">## 这里carrymaniac/carrymaniac.github.io记得换成你自己的</span>
git remote add origin git@github.com:carrymaniac/carrymaniac.github.io
<span class="c1">## 因为origin的master在创建的时候新建了个Readme，所以需要合并一下</span>
git pull origin master --allow-unrelated-histories
git status 
git add .
git commit -m <span class="s2">&#34;add new post&#34;</span>
git push -u origin master
</code></pre></div><p>此时便完成了一个人博客的部署</p>
<p>博客的地址为 <a href="https://username.github.io">https://username.github.io</a></p>
<h2 id="结语">结语</h2>
<p>博客搭建大概就是这样，之后我会补充一个如何用Github作为图床，方便博客图片插入的小番外</p>
]]></content>
		</item>
		
		<item>
			<title>Golang从入门到放弃</title>
			<link>https://carrymaniac.github.io/posts/go/</link>
			<pubDate>Mon, 06 Apr 2020 15:04:51 +0800</pubDate>
			
			<guid>https://carrymaniac.github.io/posts/go/</guid>
			<description>关于Go的工具链 go build 编译go文件 跨平台编译 env GOOS=linux GOARCH=amd64 go build
go install 也是编译 但是与build最大的不同在于会将文件输出打包在pkg目录下
go get 获取包 例如：go get -u xxx
go fmt 统一代码风格和排版
go test 测试 运行当前包目录下的tests，其中 go test -v 会打印详细信息
所用到框架：    类型 名称     web框架 gin   日志库 lexkong/log   配置 spf13/viper   JWT dgrijalva/jwt-go   数据库ORM gorm    关于fmt包    值 含义     %v 值的默认格式表示   %+v 类似%v，但输出结构体时会添加字段名   %#v 值的Go语法表示   %T 打印值的类型   %% 百分号   %b 表示为二进制   %c 该值对应的unicode码值   %d 表示为十进制   %e %E 科学计数法，如-1234.</description>
			<content type="html"><![CDATA[<h2 id="关于go的工具链">关于Go的工具链</h2>
<p>go build 编译go文件
跨平台编译 env GOOS=linux GOARCH=amd64 go build</p>
<p>go install 也是编译
但是与build最大的不同在于会将文件输出打包在pkg目录下</p>
<p>go get 获取包
例如：go get -u xxx</p>
<p>go fmt 统一代码风格和排版</p>
<p>go test 测试
运行当前包目录下的tests，其中 go test -v 会打印详细信息</p>
<p><img src="https://raw.githubusercontent.com/carrymaniac/pic/master/Golang" alt="GoTest"></p>
<h2 id="所用到框架">所用到框架：</h2>
<table>
<thead>
<tr>
<th>类型</th>
<th>名称</th>
</tr>
</thead>
<tbody>
<tr>
<td>web框架</td>
<td>gin</td>
</tr>
<tr>
<td>日志库</td>
<td>lexkong/log</td>
</tr>
<tr>
<td>配置</td>
<td>spf13/viper</td>
</tr>
<tr>
<td>JWT</td>
<td>dgrijalva/jwt-go</td>
</tr>
<tr>
<td>数据库ORM</td>
<td>gorm</td>
</tr>
</tbody>
</table>
<h2 id="关于fmt包">关于fmt包</h2>
<table>
<thead>
<tr>
<th>值</th>
<th>含义</th>
</tr>
</thead>
<tbody>
<tr>
<td>%v</td>
<td>值的默认格式表示</td>
</tr>
<tr>
<td>%+v</td>
<td>类似%v，但输出结构体时会添加字段名</td>
</tr>
<tr>
<td>%#v</td>
<td>值的Go语法表示</td>
</tr>
<tr>
<td>%T</td>
<td>打印值的类型</td>
</tr>
<tr>
<td>%%</td>
<td>百分号</td>
</tr>
<tr>
<td>%b</td>
<td>表示为二进制</td>
</tr>
<tr>
<td>%c</td>
<td>该值对应的unicode码值</td>
</tr>
<tr>
<td>%d</td>
<td>表示为十进制</td>
</tr>
<tr>
<td>%e %E</td>
<td>科学计数法，如-1234.456e+78</td>
</tr>
<tr>
<td>%f %F</td>
<td>有小数部分但无指数部分，如123.456</td>
</tr>
<tr>
<td>%s</td>
<td>直接输出字符串或者[]byte</td>
</tr>
<tr>
<td>%q</td>
<td>该值对应的双引号括起来的go语法字符串字面值，必要时会采用安全的转义表示</td>
</tr>
</tbody>
</table>
<h2 id="tip">Tip：</h2>
<ul>
<li>记住切片是从a到b-1切的：因此如果需要切到index为n的时候，需要写为[:index+1]，记得加一</li>
<li>摆脱java的定性思维，切片的遍历采用range即可 不需要去一个个写for i=0开始遍历w</li>
</ul>
<h2 id="gorm">GORM</h2>
<p>1.定义model</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kn">package</span> <span class="nx">model</span>

<span class="kn">import</span> <span class="p">(</span>
	<span class="s">&#34;time&#34;</span>
<span class="p">)</span>

<span class="kd">type</span> <span class="nx">Product</span> <span class="kd">struct</span> <span class="p">{</span>
  <span class="c1">//通过 tag 定义列名、字段的默认值(default:1)
</span><span class="c1"></span>  <span class="c1">//通过tag定义字段的默认值，在创建记录时候生成的 SQL 语句会排除没有值或值为 零值 的字段
</span><span class="c1"></span>	<span class="nx">ID</span> <span class="kt">string</span> <span class="s">`json:&#34;id&#34; gorm:&#34;column:id&#34;`</span>
	<span class="nx">Name</span> <span class="kt">string</span> <span class="s">`json:&#34;name&#34; gorm:&#34;column:name&#34;`</span>
	<span class="nx">CreateTime</span> <span class="nx">time</span><span class="p">.</span><span class="nx">Time</span> <span class="s">`json:&#34;ctime&#34; gorm:&#34;column:create_time&#34;`</span>
<span class="p">}</span>

<span class="c1">//返回表名
</span><span class="c1"></span><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Product</span><span class="p">)</span><span class="nf">TableName</span><span class="p">()</span> <span class="kt">string</span><span class="p">{</span>
	<span class="k">return</span> <span class="s">`tb_product`</span>
<span class="p">}</span>
</code></pre></div><p>2.CRUD</p>
<h3 id="创建">创建</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">func</span> <span class="p">(</span><span class="nx">p</span> <span class="o">*</span><span class="nx">Product</span><span class="p">)</span> <span class="nf">CreateProduct</span><span class="p">()</span> <span class="kt">error</span><span class="p">{</span>
  <span class="c1">//调用db.create方法进行创建
</span><span class="c1"></span>	<span class="k">return</span> <span class="nx">DB</span><span class="p">.</span><span class="nx">Self</span><span class="p">.</span><span class="nf">Create</span><span class="p">(</span><span class="nx">p</span><span class="p">).</span><span class="nx">Error</span>
<span class="p">}</span>
</code></pre></div><h3 id="查询">查询</h3>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="kd">var</span> <span class="nx">p</span> <span class="nx">Product</span>
<span class="c1">//查询获得第一个
</span><span class="c1"></span><span class="nx">db</span><span class="p">.</span><span class="nf">First</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">p</span><span class="p">)</span>
<span class="c1">//
</span><span class="c1"></span><span class="nx">lists</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="o">*</span><span class="nx">Product</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
<span class="nx">db</span><span class="p">.</span><span class="nf">Find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lists</span><span class="p">)</span>
<span class="c1">// 查询指定的某条记录(仅当主键为整型时可用)
</span><span class="c1">//SELECT * FROM users WHERE id = 10;
</span><span class="c1"></span><span class="nx">db</span><span class="p">.</span><span class="nf">First</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">p</span><span class="p">,</span> <span class="mi">10</span><span class="p">)</span>


<span class="c1">//使用where进行查询（较常见）
</span><span class="c1">//// SELECT * FROM users WHERE name = &#39;jinzhu&#39; limit 1;
</span><span class="c1">//获取单条结果
</span><span class="c1"></span><span class="nx">db</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="s">&#34;name = ?&#34;</span><span class="p">,</span> <span class="s">&#34;jinzhu&#34;</span><span class="p">).</span><span class="nf">First</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">user</span><span class="p">)</span>
<span class="c1">// 获取全部结果
</span><span class="c1"></span><span class="nx">db</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="s">&#34;name = ?&#34;</span><span class="p">,</span> <span class="s">&#34;jinzhu&#34;</span><span class="p">).</span><span class="nf">Find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">users</span><span class="p">)</span>
<span class="c1">//// SELECT * FROM users WHERE name = &#39;jinzhu&#39;;
</span><span class="c1">// &lt;&gt;
</span><span class="c1"></span><span class="nx">db</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="s">&#34;name &lt;&gt; ?&#34;</span><span class="p">,</span> <span class="s">&#34;jinzhu&#34;</span><span class="p">).</span><span class="nf">Find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">users</span><span class="p">)</span>
<span class="c1">//// SELECT * FROM users WHERE name &lt;&gt; &#39;jinzhu&#39;;
</span><span class="c1"></span>
<span class="c1">// IN
</span><span class="c1"></span><span class="nx">db</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="s">&#34;name IN (?)&#34;</span><span class="p">,</span> <span class="p">[]</span><span class="kt">string</span><span class="p">{</span><span class="s">&#34;jinzhu&#34;</span><span class="p">,</span> <span class="s">&#34;jinzhu 2&#34;</span><span class="p">}).</span><span class="nf">Find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">users</span><span class="p">)</span>
<span class="c1">//// SELECT * FROM users WHERE name in (&#39;jinzhu&#39;,&#39;jinzhu 2&#39;);
</span><span class="c1"></span>
<span class="c1">// LIKE
</span><span class="c1"></span><span class="nx">db</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="s">&#34;name LIKE ?&#34;</span><span class="p">,</span> <span class="s">&#34;%jin%&#34;</span><span class="p">).</span><span class="nf">Find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">users</span><span class="p">)</span>
<span class="c1">//// SELECT * FROM users WHERE name LIKE &#39;%jin%&#39;;
</span><span class="c1"></span>
<span class="c1">// AND
</span><span class="c1"></span><span class="nx">db</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="s">&#34;name = ? AND age &gt;= ?&#34;</span><span class="p">,</span> <span class="s">&#34;jinzhu&#34;</span><span class="p">,</span> <span class="s">&#34;22&#34;</span><span class="p">).</span><span class="nf">Find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">users</span><span class="p">)</span>
<span class="c1">//// SELECT * FROM users WHERE name = &#39;jinzhu&#39; AND age &gt;= 22;
</span><span class="c1"></span>
<span class="c1">// Time
</span><span class="c1"></span><span class="nx">db</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="s">&#34;updated_at &gt; ?&#34;</span><span class="p">,</span> <span class="nx">lastWeek</span><span class="p">).</span><span class="nf">Find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">users</span><span class="p">)</span>
<span class="c1">//// SELECT * FROM users WHERE updated_at &gt; &#39;2000-01-01 00:00:00&#39;;
</span><span class="c1"></span>
<span class="c1">// Struct
</span><span class="c1"></span><span class="nx">db</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">User</span><span class="p">{</span><span class="nx">Name</span><span class="p">:</span> <span class="s">&#34;jinzhu&#34;</span><span class="p">,</span> <span class="nx">Age</span><span class="p">:</span> <span class="mi">20</span><span class="p">}).</span><span class="nf">First</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">user</span><span class="p">)</span>
<span class="c1">//// SELECT * FROM users WHERE name = &#34;jinzhu&#34; AND age = 20 LIMIT 1;
</span><span class="c1"></span>
<span class="c1">// Map
</span><span class="c1"></span><span class="nx">db</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span><span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="s">&#34;jinzhu&#34;</span><span class="p">,</span> <span class="s">&#34;age&#34;</span><span class="p">:</span> <span class="mi">20</span><span class="p">}).</span><span class="nf">Find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">users</span><span class="p">)</span>
<span class="c1">//// SELECT * FROM users WHERE name = &#34;jinzhu&#34; AND age = 20;
</span><span class="c1"></span>
<span class="c1">// 主键的切片
</span><span class="c1"></span><span class="nx">db</span><span class="p">.</span><span class="nf">Where</span><span class="p">([]</span><span class="kt">int64</span><span class="p">{</span><span class="mi">20</span><span class="p">,</span> <span class="mi">21</span><span class="p">,</span> <span class="mi">22</span><span class="p">}).</span><span class="nf">Find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">users</span><span class="p">)</span>
<span class="c1">//// SELECT * FROM users WHERE id IN (20, 21, 22);
</span><span class="c1"></span>



<span class="kd">func</span> <span class="nf">GetProductList</span><span class="p">()</span> <span class="p">([]</span><span class="o">*</span><span class="nx">Product</span><span class="p">,</span><span class="kt">error</span><span class="p">){</span>
	<span class="nx">lists</span> <span class="o">:=</span> <span class="nb">make</span><span class="p">([]</span><span class="o">*</span><span class="nx">Product</span><span class="p">,</span><span class="mi">0</span><span class="p">)</span>
	<span class="nx">err</span> <span class="o">:=</span> <span class="nx">DB</span><span class="p">.</span><span class="nx">Self</span><span class="p">.</span><span class="nf">Where</span><span class="p">(</span><span class="s">&#34;&#34;</span><span class="p">).</span><span class="nf">Order</span><span class="p">(</span><span class="s">&#34;id desc&#34;</span><span class="p">).</span><span class="nf">Find</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">lists</span><span class="p">).</span><span class="nx">Error</span>
	<span class="k">if</span> <span class="nx">err</span><span class="o">!=</span><span class="kc">nil</span><span class="p">{</span>
		<span class="k">return</span> <span class="kc">nil</span><span class="p">,</span><span class="nx">err</span>
	<span class="p">}</span>
	<span class="k">return</span> <span class="nx">lists</span><span class="p">,</span><span class="nx">err</span>
<span class="p">}</span>
</code></pre></div><h3 id="更新">更新</h3>
<p>更新有update 、save、Updates三个方法</p>
<p><code>Save()</code>默认会更新该对象的所有字段，即使你没有赋值。</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="c1">// 根据给定的条件更新单个属性
</span><span class="c1"></span><span class="nx">db</span><span class="p">.</span><span class="nf">Model</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">user</span><span class="p">).</span><span class="nf">Where</span><span class="p">(</span><span class="s">&#34;active = ?&#34;</span><span class="p">,</span> <span class="kc">true</span><span class="p">).</span><span class="nf">Update</span><span class="p">(</span><span class="s">&#34;name&#34;</span><span class="p">,</span> <span class="s">&#34;hello&#34;</span><span class="p">)</span>
<span class="c1">//// UPDATE users SET name=&#39;hello&#39;, updated_at=&#39;2013-11-17 21:34:10&#39; WHERE id=111 AND active=true;
</span><span class="c1"></span>
<span class="c1">// 使用 map 更新多个属性，只会更新其中有变化的属性
</span><span class="c1"></span><span class="nx">db</span><span class="p">.</span><span class="nf">Model</span><span class="p">(</span><span class="o">&amp;</span><span class="nx">user</span><span class="p">).</span><span class="nf">Updates</span><span class="p">(</span><span class="kd">map</span><span class="p">[</span><span class="kt">string</span><span class="p">]</span><span class="kd">interface</span><span class="p">{}{</span><span class="s">&#34;name&#34;</span><span class="p">:</span> <span class="s">&#34;hello&#34;</span><span class="p">,</span> <span class="s">&#34;age&#34;</span><span class="p">:</span> <span class="mi">18</span><span class="p">,</span> <span class="s">&#34;active&#34;</span><span class="p">:</span> <span class="kc">false</span><span class="p">})</span>
<span class="c1">//// UPDATE users SET name=&#39;hello&#39;, age=18, active=false, updated_at=&#39;2013-11-17 21:34:10&#39; WHERE id=111;
</span><span class="c1"></span>
</code></pre></div>]]></content>
		</item>
		
	</channel>
</rss>
